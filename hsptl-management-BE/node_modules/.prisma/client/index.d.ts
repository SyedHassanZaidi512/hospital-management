
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model devices
 * 
 */
export type devices = {
  id: string
  anlagenID: string | null
  seriennr: string | null
  gehortzu: string | null
  anlagenbez: string | null
  typModell: string | null
  hersteller: string | null
  lieferant: string | null
  servicestelle: string | null
  abteilung: string | null
  kostenstelle: string | null
  SLA: string | null
  preisProSLA: string | null
  status: string | null
  raumbezMT: string | null
  contact: string | null
  date: string | null
  email: string | null
  telephone: string | null
  companyName: string | null
  isRequested: boolean | null
  isDone: boolean | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model images
 * 
 */
export type images = {
  id: string
  deviceId: string | null
  imageURL: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model notes
 * 
 */
export type notes = {
  id: string
  title: string | null
  content: string
  deviceId: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model reminders
 * 
 */
export type reminders = {
  id: string
  time: string
  message: string | null
  isComing: boolean
  deviceId: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model files
 * 
 */
export type files = {
  id: string
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model appNote
 * 
 */
export type appNote = {
  id: string
  note: string
  createdAt: Date
  updatedAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Devices
 * const devices = await prisma.devices.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Devices
   * const devices = await prisma.devices.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.devices`: Exposes CRUD operations for the **devices** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Devices
    * const devices = await prisma.devices.findMany()
    * ```
    */
  get devices(): Prisma.devicesDelegate<GlobalReject>;

  /**
   * `prisma.images`: Exposes CRUD operations for the **images** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.images.findMany()
    * ```
    */
  get images(): Prisma.imagesDelegate<GlobalReject>;

  /**
   * `prisma.notes`: Exposes CRUD operations for the **notes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notes
    * const notes = await prisma.notes.findMany()
    * ```
    */
  get notes(): Prisma.notesDelegate<GlobalReject>;

  /**
   * `prisma.reminders`: Exposes CRUD operations for the **reminders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reminders
    * const reminders = await prisma.reminders.findMany()
    * ```
    */
  get reminders(): Prisma.remindersDelegate<GlobalReject>;

  /**
   * `prisma.files`: Exposes CRUD operations for the **files** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.files.findMany()
    * ```
    */
  get files(): Prisma.filesDelegate<GlobalReject>;

  /**
   * `prisma.appNote`: Exposes CRUD operations for the **appNote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AppNotes
    * const appNotes = await prisma.appNote.findMany()
    * ```
    */
  get appNote(): Prisma.appNoteDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    devices: 'devices',
    images: 'images',
    notes: 'notes',
    reminders: 'reminders',
    files: 'files',
    appNote: 'appNote'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DevicesCountOutputType
   */


  export type DevicesCountOutputType = {
    images: number
    reminders: number
    notes: number
  }

  export type DevicesCountOutputTypeSelect = {
    images?: boolean
    reminders?: boolean
    notes?: boolean
  }

  export type DevicesCountOutputTypeGetPayload<S extends boolean | null | undefined | DevicesCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DevicesCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (DevicesCountOutputTypeArgs)
    ? DevicesCountOutputType 
    : S extends { select: any } & (DevicesCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof DevicesCountOutputType ? DevicesCountOutputType[P] : never
  } 
      : DevicesCountOutputType




  // Custom InputTypes

  /**
   * DevicesCountOutputType without action
   */
  export type DevicesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DevicesCountOutputType
     */
    select?: DevicesCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model devices
   */


  export type AggregateDevices = {
    _count: DevicesCountAggregateOutputType | null
    _min: DevicesMinAggregateOutputType | null
    _max: DevicesMaxAggregateOutputType | null
  }

  export type DevicesMinAggregateOutputType = {
    id: string | null
    anlagenID: string | null
    seriennr: string | null
    gehortzu: string | null
    anlagenbez: string | null
    typModell: string | null
    hersteller: string | null
    lieferant: string | null
    servicestelle: string | null
    abteilung: string | null
    kostenstelle: string | null
    SLA: string | null
    preisProSLA: string | null
    status: string | null
    raumbezMT: string | null
    contact: string | null
    date: string | null
    email: string | null
    telephone: string | null
    companyName: string | null
    isRequested: boolean | null
    isDone: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DevicesMaxAggregateOutputType = {
    id: string | null
    anlagenID: string | null
    seriennr: string | null
    gehortzu: string | null
    anlagenbez: string | null
    typModell: string | null
    hersteller: string | null
    lieferant: string | null
    servicestelle: string | null
    abteilung: string | null
    kostenstelle: string | null
    SLA: string | null
    preisProSLA: string | null
    status: string | null
    raumbezMT: string | null
    contact: string | null
    date: string | null
    email: string | null
    telephone: string | null
    companyName: string | null
    isRequested: boolean | null
    isDone: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DevicesCountAggregateOutputType = {
    id: number
    anlagenID: number
    seriennr: number
    gehortzu: number
    anlagenbez: number
    typModell: number
    hersteller: number
    lieferant: number
    servicestelle: number
    abteilung: number
    kostenstelle: number
    SLA: number
    preisProSLA: number
    status: number
    raumbezMT: number
    contact: number
    date: number
    email: number
    telephone: number
    companyName: number
    isRequested: number
    isDone: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DevicesMinAggregateInputType = {
    id?: true
    anlagenID?: true
    seriennr?: true
    gehortzu?: true
    anlagenbez?: true
    typModell?: true
    hersteller?: true
    lieferant?: true
    servicestelle?: true
    abteilung?: true
    kostenstelle?: true
    SLA?: true
    preisProSLA?: true
    status?: true
    raumbezMT?: true
    contact?: true
    date?: true
    email?: true
    telephone?: true
    companyName?: true
    isRequested?: true
    isDone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DevicesMaxAggregateInputType = {
    id?: true
    anlagenID?: true
    seriennr?: true
    gehortzu?: true
    anlagenbez?: true
    typModell?: true
    hersteller?: true
    lieferant?: true
    servicestelle?: true
    abteilung?: true
    kostenstelle?: true
    SLA?: true
    preisProSLA?: true
    status?: true
    raumbezMT?: true
    contact?: true
    date?: true
    email?: true
    telephone?: true
    companyName?: true
    isRequested?: true
    isDone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DevicesCountAggregateInputType = {
    id?: true
    anlagenID?: true
    seriennr?: true
    gehortzu?: true
    anlagenbez?: true
    typModell?: true
    hersteller?: true
    lieferant?: true
    servicestelle?: true
    abteilung?: true
    kostenstelle?: true
    SLA?: true
    preisProSLA?: true
    status?: true
    raumbezMT?: true
    contact?: true
    date?: true
    email?: true
    telephone?: true
    companyName?: true
    isRequested?: true
    isDone?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DevicesAggregateArgs = {
    /**
     * Filter which devices to aggregate.
     */
    where?: devicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of devices to fetch.
     */
    orderBy?: Enumerable<devicesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: devicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned devices
    **/
    _count?: true | DevicesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DevicesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DevicesMaxAggregateInputType
  }

  export type GetDevicesAggregateType<T extends DevicesAggregateArgs> = {
        [P in keyof T & keyof AggregateDevices]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDevices[P]>
      : GetScalarType<T[P], AggregateDevices[P]>
  }




  export type DevicesGroupByArgs = {
    where?: devicesWhereInput
    orderBy?: Enumerable<devicesOrderByWithAggregationInput>
    by: DevicesScalarFieldEnum[]
    having?: devicesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DevicesCountAggregateInputType | true
    _min?: DevicesMinAggregateInputType
    _max?: DevicesMaxAggregateInputType
  }


  export type DevicesGroupByOutputType = {
    id: string
    anlagenID: string | null
    seriennr: string | null
    gehortzu: string | null
    anlagenbez: string | null
    typModell: string | null
    hersteller: string | null
    lieferant: string | null
    servicestelle: string | null
    abteilung: string | null
    kostenstelle: string | null
    SLA: string | null
    preisProSLA: string | null
    status: string | null
    raumbezMT: string | null
    contact: string | null
    date: string | null
    email: string | null
    telephone: string | null
    companyName: string | null
    isRequested: boolean | null
    isDone: boolean | null
    createdAt: Date
    updatedAt: Date
    _count: DevicesCountAggregateOutputType | null
    _min: DevicesMinAggregateOutputType | null
    _max: DevicesMaxAggregateOutputType | null
  }

  type GetDevicesGroupByPayload<T extends DevicesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DevicesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DevicesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DevicesGroupByOutputType[P]>
            : GetScalarType<T[P], DevicesGroupByOutputType[P]>
        }
      >
    >


  export type devicesSelect = {
    id?: boolean
    anlagenID?: boolean
    seriennr?: boolean
    gehortzu?: boolean
    anlagenbez?: boolean
    typModell?: boolean
    hersteller?: boolean
    lieferant?: boolean
    servicestelle?: boolean
    abteilung?: boolean
    kostenstelle?: boolean
    SLA?: boolean
    preisProSLA?: boolean
    status?: boolean
    raumbezMT?: boolean
    contact?: boolean
    date?: boolean
    email?: boolean
    telephone?: boolean
    companyName?: boolean
    isRequested?: boolean
    isDone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    images?: boolean | devices$imagesArgs
    reminders?: boolean | devices$remindersArgs
    notes?: boolean | devices$notesArgs
    _count?: boolean | DevicesCountOutputTypeArgs
  }


  export type devicesInclude = {
    images?: boolean | devices$imagesArgs
    reminders?: boolean | devices$remindersArgs
    notes?: boolean | devices$notesArgs
    _count?: boolean | DevicesCountOutputTypeArgs
  }

  export type devicesGetPayload<S extends boolean | null | undefined | devicesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? devices :
    S extends undefined ? never :
    S extends { include: any } & (devicesArgs | devicesFindManyArgs)
    ? devices  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'images' ? Array < imagesGetPayload<S['include'][P]>>  :
        P extends 'reminders' ? Array < remindersGetPayload<S['include'][P]>>  :
        P extends 'notes' ? Array < notesGetPayload<S['include'][P]>>  :
        P extends '_count' ? DevicesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (devicesArgs | devicesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'images' ? Array < imagesGetPayload<S['select'][P]>>  :
        P extends 'reminders' ? Array < remindersGetPayload<S['select'][P]>>  :
        P extends 'notes' ? Array < notesGetPayload<S['select'][P]>>  :
        P extends '_count' ? DevicesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof devices ? devices[P] : never
  } 
      : devices


  type devicesCountArgs = 
    Omit<devicesFindManyArgs, 'select' | 'include'> & {
      select?: DevicesCountAggregateInputType | true
    }

  export interface devicesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Devices that matches the filter.
     * @param {devicesFindUniqueArgs} args - Arguments to find a Devices
     * @example
     * // Get one Devices
     * const devices = await prisma.devices.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends devicesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, devicesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'devices'> extends True ? Prisma__devicesClient<devicesGetPayload<T>> : Prisma__devicesClient<devicesGetPayload<T> | null, null>

    /**
     * Find one Devices that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {devicesFindUniqueOrThrowArgs} args - Arguments to find a Devices
     * @example
     * // Get one Devices
     * const devices = await prisma.devices.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends devicesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, devicesFindUniqueOrThrowArgs>
    ): Prisma__devicesClient<devicesGetPayload<T>>

    /**
     * Find the first Devices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {devicesFindFirstArgs} args - Arguments to find a Devices
     * @example
     * // Get one Devices
     * const devices = await prisma.devices.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends devicesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, devicesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'devices'> extends True ? Prisma__devicesClient<devicesGetPayload<T>> : Prisma__devicesClient<devicesGetPayload<T> | null, null>

    /**
     * Find the first Devices that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {devicesFindFirstOrThrowArgs} args - Arguments to find a Devices
     * @example
     * // Get one Devices
     * const devices = await prisma.devices.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends devicesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, devicesFindFirstOrThrowArgs>
    ): Prisma__devicesClient<devicesGetPayload<T>>

    /**
     * Find zero or more Devices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {devicesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Devices
     * const devices = await prisma.devices.findMany()
     * 
     * // Get first 10 Devices
     * const devices = await prisma.devices.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const devicesWithIdOnly = await prisma.devices.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends devicesFindManyArgs>(
      args?: SelectSubset<T, devicesFindManyArgs>
    ): Prisma.PrismaPromise<Array<devicesGetPayload<T>>>

    /**
     * Create a Devices.
     * @param {devicesCreateArgs} args - Arguments to create a Devices.
     * @example
     * // Create one Devices
     * const Devices = await prisma.devices.create({
     *   data: {
     *     // ... data to create a Devices
     *   }
     * })
     * 
    **/
    create<T extends devicesCreateArgs>(
      args: SelectSubset<T, devicesCreateArgs>
    ): Prisma__devicesClient<devicesGetPayload<T>>

    /**
     * Create many Devices.
     *     @param {devicesCreateManyArgs} args - Arguments to create many Devices.
     *     @example
     *     // Create many Devices
     *     const devices = await prisma.devices.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends devicesCreateManyArgs>(
      args?: SelectSubset<T, devicesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Devices.
     * @param {devicesDeleteArgs} args - Arguments to delete one Devices.
     * @example
     * // Delete one Devices
     * const Devices = await prisma.devices.delete({
     *   where: {
     *     // ... filter to delete one Devices
     *   }
     * })
     * 
    **/
    delete<T extends devicesDeleteArgs>(
      args: SelectSubset<T, devicesDeleteArgs>
    ): Prisma__devicesClient<devicesGetPayload<T>>

    /**
     * Update one Devices.
     * @param {devicesUpdateArgs} args - Arguments to update one Devices.
     * @example
     * // Update one Devices
     * const devices = await prisma.devices.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends devicesUpdateArgs>(
      args: SelectSubset<T, devicesUpdateArgs>
    ): Prisma__devicesClient<devicesGetPayload<T>>

    /**
     * Delete zero or more Devices.
     * @param {devicesDeleteManyArgs} args - Arguments to filter Devices to delete.
     * @example
     * // Delete a few Devices
     * const { count } = await prisma.devices.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends devicesDeleteManyArgs>(
      args?: SelectSubset<T, devicesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {devicesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Devices
     * const devices = await prisma.devices.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends devicesUpdateManyArgs>(
      args: SelectSubset<T, devicesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Devices.
     * @param {devicesUpsertArgs} args - Arguments to update or create a Devices.
     * @example
     * // Update or create a Devices
     * const devices = await prisma.devices.upsert({
     *   create: {
     *     // ... data to create a Devices
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Devices we want to update
     *   }
     * })
    **/
    upsert<T extends devicesUpsertArgs>(
      args: SelectSubset<T, devicesUpsertArgs>
    ): Prisma__devicesClient<devicesGetPayload<T>>

    /**
     * Count the number of Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {devicesCountArgs} args - Arguments to filter Devices to count.
     * @example
     * // Count the number of Devices
     * const count = await prisma.devices.count({
     *   where: {
     *     // ... the filter for the Devices we want to count
     *   }
     * })
    **/
    count<T extends devicesCountArgs>(
      args?: Subset<T, devicesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DevicesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DevicesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DevicesAggregateArgs>(args: Subset<T, DevicesAggregateArgs>): Prisma.PrismaPromise<GetDevicesAggregateType<T>>

    /**
     * Group by Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DevicesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DevicesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DevicesGroupByArgs['orderBy'] }
        : { orderBy?: DevicesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DevicesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDevicesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for devices.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__devicesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    images<T extends devices$imagesArgs= {}>(args?: Subset<T, devices$imagesArgs>): Prisma.PrismaPromise<Array<imagesGetPayload<T>>| Null>;

    reminders<T extends devices$remindersArgs= {}>(args?: Subset<T, devices$remindersArgs>): Prisma.PrismaPromise<Array<remindersGetPayload<T>>| Null>;

    notes<T extends devices$notesArgs= {}>(args?: Subset<T, devices$notesArgs>): Prisma.PrismaPromise<Array<notesGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * devices base type for findUnique actions
   */
  export type devicesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the devices
     */
    select?: devicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: devicesInclude | null
    /**
     * Filter, which devices to fetch.
     */
    where: devicesWhereUniqueInput
  }

  /**
   * devices findUnique
   */
  export interface devicesFindUniqueArgs extends devicesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * devices findUniqueOrThrow
   */
  export type devicesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the devices
     */
    select?: devicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: devicesInclude | null
    /**
     * Filter, which devices to fetch.
     */
    where: devicesWhereUniqueInput
  }


  /**
   * devices base type for findFirst actions
   */
  export type devicesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the devices
     */
    select?: devicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: devicesInclude | null
    /**
     * Filter, which devices to fetch.
     */
    where?: devicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of devices to fetch.
     */
    orderBy?: Enumerable<devicesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for devices.
     */
    cursor?: devicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of devices.
     */
    distinct?: Enumerable<DevicesScalarFieldEnum>
  }

  /**
   * devices findFirst
   */
  export interface devicesFindFirstArgs extends devicesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * devices findFirstOrThrow
   */
  export type devicesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the devices
     */
    select?: devicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: devicesInclude | null
    /**
     * Filter, which devices to fetch.
     */
    where?: devicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of devices to fetch.
     */
    orderBy?: Enumerable<devicesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for devices.
     */
    cursor?: devicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of devices.
     */
    distinct?: Enumerable<DevicesScalarFieldEnum>
  }


  /**
   * devices findMany
   */
  export type devicesFindManyArgs = {
    /**
     * Select specific fields to fetch from the devices
     */
    select?: devicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: devicesInclude | null
    /**
     * Filter, which devices to fetch.
     */
    where?: devicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of devices to fetch.
     */
    orderBy?: Enumerable<devicesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing devices.
     */
    cursor?: devicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` devices.
     */
    skip?: number
    distinct?: Enumerable<DevicesScalarFieldEnum>
  }


  /**
   * devices create
   */
  export type devicesCreateArgs = {
    /**
     * Select specific fields to fetch from the devices
     */
    select?: devicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: devicesInclude | null
    /**
     * The data needed to create a devices.
     */
    data: XOR<devicesCreateInput, devicesUncheckedCreateInput>
  }


  /**
   * devices createMany
   */
  export type devicesCreateManyArgs = {
    /**
     * The data used to create many devices.
     */
    data: Enumerable<devicesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * devices update
   */
  export type devicesUpdateArgs = {
    /**
     * Select specific fields to fetch from the devices
     */
    select?: devicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: devicesInclude | null
    /**
     * The data needed to update a devices.
     */
    data: XOR<devicesUpdateInput, devicesUncheckedUpdateInput>
    /**
     * Choose, which devices to update.
     */
    where: devicesWhereUniqueInput
  }


  /**
   * devices updateMany
   */
  export type devicesUpdateManyArgs = {
    /**
     * The data used to update devices.
     */
    data: XOR<devicesUpdateManyMutationInput, devicesUncheckedUpdateManyInput>
    /**
     * Filter which devices to update
     */
    where?: devicesWhereInput
  }


  /**
   * devices upsert
   */
  export type devicesUpsertArgs = {
    /**
     * Select specific fields to fetch from the devices
     */
    select?: devicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: devicesInclude | null
    /**
     * The filter to search for the devices to update in case it exists.
     */
    where: devicesWhereUniqueInput
    /**
     * In case the devices found by the `where` argument doesn't exist, create a new devices with this data.
     */
    create: XOR<devicesCreateInput, devicesUncheckedCreateInput>
    /**
     * In case the devices was found with the provided `where` argument, update it with this data.
     */
    update: XOR<devicesUpdateInput, devicesUncheckedUpdateInput>
  }


  /**
   * devices delete
   */
  export type devicesDeleteArgs = {
    /**
     * Select specific fields to fetch from the devices
     */
    select?: devicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: devicesInclude | null
    /**
     * Filter which devices to delete.
     */
    where: devicesWhereUniqueInput
  }


  /**
   * devices deleteMany
   */
  export type devicesDeleteManyArgs = {
    /**
     * Filter which devices to delete
     */
    where?: devicesWhereInput
  }


  /**
   * devices.images
   */
  export type devices$imagesArgs = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagesInclude | null
    where?: imagesWhereInput
    orderBy?: Enumerable<imagesOrderByWithRelationInput>
    cursor?: imagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ImagesScalarFieldEnum>
  }


  /**
   * devices.reminders
   */
  export type devices$remindersArgs = {
    /**
     * Select specific fields to fetch from the reminders
     */
    select?: remindersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: remindersInclude | null
    where?: remindersWhereInput
    orderBy?: Enumerable<remindersOrderByWithRelationInput>
    cursor?: remindersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RemindersScalarFieldEnum>
  }


  /**
   * devices.notes
   */
  export type devices$notesArgs = {
    /**
     * Select specific fields to fetch from the notes
     */
    select?: notesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notesInclude | null
    where?: notesWhereInput
    orderBy?: Enumerable<notesOrderByWithRelationInput>
    cursor?: notesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NotesScalarFieldEnum>
  }


  /**
   * devices without action
   */
  export type devicesArgs = {
    /**
     * Select specific fields to fetch from the devices
     */
    select?: devicesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: devicesInclude | null
  }



  /**
   * Model images
   */


  export type AggregateImages = {
    _count: ImagesCountAggregateOutputType | null
    _min: ImagesMinAggregateOutputType | null
    _max: ImagesMaxAggregateOutputType | null
  }

  export type ImagesMinAggregateOutputType = {
    id: string | null
    deviceId: string | null
    imageURL: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ImagesMaxAggregateOutputType = {
    id: string | null
    deviceId: string | null
    imageURL: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ImagesCountAggregateOutputType = {
    id: number
    deviceId: number
    imageURL: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ImagesMinAggregateInputType = {
    id?: true
    deviceId?: true
    imageURL?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ImagesMaxAggregateInputType = {
    id?: true
    deviceId?: true
    imageURL?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ImagesCountAggregateInputType = {
    id?: true
    deviceId?: true
    imageURL?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ImagesAggregateArgs = {
    /**
     * Filter which images to aggregate.
     */
    where?: imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     */
    orderBy?: Enumerable<imagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned images
    **/
    _count?: true | ImagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImagesMaxAggregateInputType
  }

  export type GetImagesAggregateType<T extends ImagesAggregateArgs> = {
        [P in keyof T & keyof AggregateImages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImages[P]>
      : GetScalarType<T[P], AggregateImages[P]>
  }




  export type ImagesGroupByArgs = {
    where?: imagesWhereInput
    orderBy?: Enumerable<imagesOrderByWithAggregationInput>
    by: ImagesScalarFieldEnum[]
    having?: imagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImagesCountAggregateInputType | true
    _min?: ImagesMinAggregateInputType
    _max?: ImagesMaxAggregateInputType
  }


  export type ImagesGroupByOutputType = {
    id: string
    deviceId: string | null
    imageURL: string
    createdAt: Date
    updatedAt: Date
    _count: ImagesCountAggregateOutputType | null
    _min: ImagesMinAggregateOutputType | null
    _max: ImagesMaxAggregateOutputType | null
  }

  type GetImagesGroupByPayload<T extends ImagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ImagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImagesGroupByOutputType[P]>
            : GetScalarType<T[P], ImagesGroupByOutputType[P]>
        }
      >
    >


  export type imagesSelect = {
    id?: boolean
    deviceId?: boolean
    imageURL?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    devices?: boolean | devicesArgs
  }


  export type imagesInclude = {
    devices?: boolean | devicesArgs
  }

  export type imagesGetPayload<S extends boolean | null | undefined | imagesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? images :
    S extends undefined ? never :
    S extends { include: any } & (imagesArgs | imagesFindManyArgs)
    ? images  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'devices' ? devicesGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (imagesArgs | imagesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'devices' ? devicesGetPayload<S['select'][P]> | null :  P extends keyof images ? images[P] : never
  } 
      : images


  type imagesCountArgs = 
    Omit<imagesFindManyArgs, 'select' | 'include'> & {
      select?: ImagesCountAggregateInputType | true
    }

  export interface imagesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Images that matches the filter.
     * @param {imagesFindUniqueArgs} args - Arguments to find a Images
     * @example
     * // Get one Images
     * const images = await prisma.images.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends imagesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, imagesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'images'> extends True ? Prisma__imagesClient<imagesGetPayload<T>> : Prisma__imagesClient<imagesGetPayload<T> | null, null>

    /**
     * Find one Images that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {imagesFindUniqueOrThrowArgs} args - Arguments to find a Images
     * @example
     * // Get one Images
     * const images = await prisma.images.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends imagesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, imagesFindUniqueOrThrowArgs>
    ): Prisma__imagesClient<imagesGetPayload<T>>

    /**
     * Find the first Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesFindFirstArgs} args - Arguments to find a Images
     * @example
     * // Get one Images
     * const images = await prisma.images.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends imagesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, imagesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'images'> extends True ? Prisma__imagesClient<imagesGetPayload<T>> : Prisma__imagesClient<imagesGetPayload<T> | null, null>

    /**
     * Find the first Images that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesFindFirstOrThrowArgs} args - Arguments to find a Images
     * @example
     * // Get one Images
     * const images = await prisma.images.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends imagesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, imagesFindFirstOrThrowArgs>
    ): Prisma__imagesClient<imagesGetPayload<T>>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.images.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.images.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imagesWithIdOnly = await prisma.images.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends imagesFindManyArgs>(
      args?: SelectSubset<T, imagesFindManyArgs>
    ): Prisma.PrismaPromise<Array<imagesGetPayload<T>>>

    /**
     * Create a Images.
     * @param {imagesCreateArgs} args - Arguments to create a Images.
     * @example
     * // Create one Images
     * const Images = await prisma.images.create({
     *   data: {
     *     // ... data to create a Images
     *   }
     * })
     * 
    **/
    create<T extends imagesCreateArgs>(
      args: SelectSubset<T, imagesCreateArgs>
    ): Prisma__imagesClient<imagesGetPayload<T>>

    /**
     * Create many Images.
     *     @param {imagesCreateManyArgs} args - Arguments to create many Images.
     *     @example
     *     // Create many Images
     *     const images = await prisma.images.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends imagesCreateManyArgs>(
      args?: SelectSubset<T, imagesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Images.
     * @param {imagesDeleteArgs} args - Arguments to delete one Images.
     * @example
     * // Delete one Images
     * const Images = await prisma.images.delete({
     *   where: {
     *     // ... filter to delete one Images
     *   }
     * })
     * 
    **/
    delete<T extends imagesDeleteArgs>(
      args: SelectSubset<T, imagesDeleteArgs>
    ): Prisma__imagesClient<imagesGetPayload<T>>

    /**
     * Update one Images.
     * @param {imagesUpdateArgs} args - Arguments to update one Images.
     * @example
     * // Update one Images
     * const images = await prisma.images.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends imagesUpdateArgs>(
      args: SelectSubset<T, imagesUpdateArgs>
    ): Prisma__imagesClient<imagesGetPayload<T>>

    /**
     * Delete zero or more Images.
     * @param {imagesDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.images.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends imagesDeleteManyArgs>(
      args?: SelectSubset<T, imagesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const images = await prisma.images.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends imagesUpdateManyArgs>(
      args: SelectSubset<T, imagesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Images.
     * @param {imagesUpsertArgs} args - Arguments to update or create a Images.
     * @example
     * // Update or create a Images
     * const images = await prisma.images.upsert({
     *   create: {
     *     // ... data to create a Images
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Images we want to update
     *   }
     * })
    **/
    upsert<T extends imagesUpsertArgs>(
      args: SelectSubset<T, imagesUpsertArgs>
    ): Prisma__imagesClient<imagesGetPayload<T>>

    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagesCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.images.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends imagesCountArgs>(
      args?: Subset<T, imagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImagesAggregateArgs>(args: Subset<T, ImagesAggregateArgs>): Prisma.PrismaPromise<GetImagesAggregateType<T>>

    /**
     * Group by Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImagesGroupByArgs['orderBy'] }
        : { orderBy?: ImagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for images.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__imagesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    devices<T extends devicesArgs= {}>(args?: Subset<T, devicesArgs>): Prisma__devicesClient<devicesGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * images base type for findUnique actions
   */
  export type imagesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagesInclude | null
    /**
     * Filter, which images to fetch.
     */
    where: imagesWhereUniqueInput
  }

  /**
   * images findUnique
   */
  export interface imagesFindUniqueArgs extends imagesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * images findUniqueOrThrow
   */
  export type imagesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagesInclude | null
    /**
     * Filter, which images to fetch.
     */
    where: imagesWhereUniqueInput
  }


  /**
   * images base type for findFirst actions
   */
  export type imagesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagesInclude | null
    /**
     * Filter, which images to fetch.
     */
    where?: imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     */
    orderBy?: Enumerable<imagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for images.
     */
    cursor?: imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of images.
     */
    distinct?: Enumerable<ImagesScalarFieldEnum>
  }

  /**
   * images findFirst
   */
  export interface imagesFindFirstArgs extends imagesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * images findFirstOrThrow
   */
  export type imagesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagesInclude | null
    /**
     * Filter, which images to fetch.
     */
    where?: imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     */
    orderBy?: Enumerable<imagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for images.
     */
    cursor?: imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of images.
     */
    distinct?: Enumerable<ImagesScalarFieldEnum>
  }


  /**
   * images findMany
   */
  export type imagesFindManyArgs = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagesInclude | null
    /**
     * Filter, which images to fetch.
     */
    where?: imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     */
    orderBy?: Enumerable<imagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing images.
     */
    cursor?: imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     */
    skip?: number
    distinct?: Enumerable<ImagesScalarFieldEnum>
  }


  /**
   * images create
   */
  export type imagesCreateArgs = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagesInclude | null
    /**
     * The data needed to create a images.
     */
    data: XOR<imagesCreateInput, imagesUncheckedCreateInput>
  }


  /**
   * images createMany
   */
  export type imagesCreateManyArgs = {
    /**
     * The data used to create many images.
     */
    data: Enumerable<imagesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * images update
   */
  export type imagesUpdateArgs = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagesInclude | null
    /**
     * The data needed to update a images.
     */
    data: XOR<imagesUpdateInput, imagesUncheckedUpdateInput>
    /**
     * Choose, which images to update.
     */
    where: imagesWhereUniqueInput
  }


  /**
   * images updateMany
   */
  export type imagesUpdateManyArgs = {
    /**
     * The data used to update images.
     */
    data: XOR<imagesUpdateManyMutationInput, imagesUncheckedUpdateManyInput>
    /**
     * Filter which images to update
     */
    where?: imagesWhereInput
  }


  /**
   * images upsert
   */
  export type imagesUpsertArgs = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagesInclude | null
    /**
     * The filter to search for the images to update in case it exists.
     */
    where: imagesWhereUniqueInput
    /**
     * In case the images found by the `where` argument doesn't exist, create a new images with this data.
     */
    create: XOR<imagesCreateInput, imagesUncheckedCreateInput>
    /**
     * In case the images was found with the provided `where` argument, update it with this data.
     */
    update: XOR<imagesUpdateInput, imagesUncheckedUpdateInput>
  }


  /**
   * images delete
   */
  export type imagesDeleteArgs = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagesInclude | null
    /**
     * Filter which images to delete.
     */
    where: imagesWhereUniqueInput
  }


  /**
   * images deleteMany
   */
  export type imagesDeleteManyArgs = {
    /**
     * Filter which images to delete
     */
    where?: imagesWhereInput
  }


  /**
   * images without action
   */
  export type imagesArgs = {
    /**
     * Select specific fields to fetch from the images
     */
    select?: imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imagesInclude | null
  }



  /**
   * Model notes
   */


  export type AggregateNotes = {
    _count: NotesCountAggregateOutputType | null
    _min: NotesMinAggregateOutputType | null
    _max: NotesMaxAggregateOutputType | null
  }

  export type NotesMinAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    deviceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotesMaxAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    deviceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotesCountAggregateOutputType = {
    id: number
    title: number
    content: number
    deviceId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotesMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    deviceId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotesMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    deviceId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotesCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    deviceId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotesAggregateArgs = {
    /**
     * Filter which notes to aggregate.
     */
    where?: notesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notes to fetch.
     */
    orderBy?: Enumerable<notesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: notesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned notes
    **/
    _count?: true | NotesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotesMaxAggregateInputType
  }

  export type GetNotesAggregateType<T extends NotesAggregateArgs> = {
        [P in keyof T & keyof AggregateNotes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotes[P]>
      : GetScalarType<T[P], AggregateNotes[P]>
  }




  export type NotesGroupByArgs = {
    where?: notesWhereInput
    orderBy?: Enumerable<notesOrderByWithAggregationInput>
    by: NotesScalarFieldEnum[]
    having?: notesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotesCountAggregateInputType | true
    _min?: NotesMinAggregateInputType
    _max?: NotesMaxAggregateInputType
  }


  export type NotesGroupByOutputType = {
    id: string
    title: string | null
    content: string
    deviceId: string | null
    createdAt: Date
    updatedAt: Date
    _count: NotesCountAggregateOutputType | null
    _min: NotesMinAggregateOutputType | null
    _max: NotesMaxAggregateOutputType | null
  }

  type GetNotesGroupByPayload<T extends NotesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<NotesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotesGroupByOutputType[P]>
            : GetScalarType<T[P], NotesGroupByOutputType[P]>
        }
      >
    >


  export type notesSelect = {
    id?: boolean
    title?: boolean
    content?: boolean
    deviceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    devices?: boolean | devicesArgs
  }


  export type notesInclude = {
    devices?: boolean | devicesArgs
  }

  export type notesGetPayload<S extends boolean | null | undefined | notesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? notes :
    S extends undefined ? never :
    S extends { include: any } & (notesArgs | notesFindManyArgs)
    ? notes  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'devices' ? devicesGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (notesArgs | notesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'devices' ? devicesGetPayload<S['select'][P]> | null :  P extends keyof notes ? notes[P] : never
  } 
      : notes


  type notesCountArgs = 
    Omit<notesFindManyArgs, 'select' | 'include'> & {
      select?: NotesCountAggregateInputType | true
    }

  export interface notesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Notes that matches the filter.
     * @param {notesFindUniqueArgs} args - Arguments to find a Notes
     * @example
     * // Get one Notes
     * const notes = await prisma.notes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends notesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, notesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'notes'> extends True ? Prisma__notesClient<notesGetPayload<T>> : Prisma__notesClient<notesGetPayload<T> | null, null>

    /**
     * Find one Notes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {notesFindUniqueOrThrowArgs} args - Arguments to find a Notes
     * @example
     * // Get one Notes
     * const notes = await prisma.notes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends notesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, notesFindUniqueOrThrowArgs>
    ): Prisma__notesClient<notesGetPayload<T>>

    /**
     * Find the first Notes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notesFindFirstArgs} args - Arguments to find a Notes
     * @example
     * // Get one Notes
     * const notes = await prisma.notes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends notesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, notesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'notes'> extends True ? Prisma__notesClient<notesGetPayload<T>> : Prisma__notesClient<notesGetPayload<T> | null, null>

    /**
     * Find the first Notes that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notesFindFirstOrThrowArgs} args - Arguments to find a Notes
     * @example
     * // Get one Notes
     * const notes = await prisma.notes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends notesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, notesFindFirstOrThrowArgs>
    ): Prisma__notesClient<notesGetPayload<T>>

    /**
     * Find zero or more Notes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notes
     * const notes = await prisma.notes.findMany()
     * 
     * // Get first 10 Notes
     * const notes = await prisma.notes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notesWithIdOnly = await prisma.notes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends notesFindManyArgs>(
      args?: SelectSubset<T, notesFindManyArgs>
    ): Prisma.PrismaPromise<Array<notesGetPayload<T>>>

    /**
     * Create a Notes.
     * @param {notesCreateArgs} args - Arguments to create a Notes.
     * @example
     * // Create one Notes
     * const Notes = await prisma.notes.create({
     *   data: {
     *     // ... data to create a Notes
     *   }
     * })
     * 
    **/
    create<T extends notesCreateArgs>(
      args: SelectSubset<T, notesCreateArgs>
    ): Prisma__notesClient<notesGetPayload<T>>

    /**
     * Create many Notes.
     *     @param {notesCreateManyArgs} args - Arguments to create many Notes.
     *     @example
     *     // Create many Notes
     *     const notes = await prisma.notes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends notesCreateManyArgs>(
      args?: SelectSubset<T, notesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notes.
     * @param {notesDeleteArgs} args - Arguments to delete one Notes.
     * @example
     * // Delete one Notes
     * const Notes = await prisma.notes.delete({
     *   where: {
     *     // ... filter to delete one Notes
     *   }
     * })
     * 
    **/
    delete<T extends notesDeleteArgs>(
      args: SelectSubset<T, notesDeleteArgs>
    ): Prisma__notesClient<notesGetPayload<T>>

    /**
     * Update one Notes.
     * @param {notesUpdateArgs} args - Arguments to update one Notes.
     * @example
     * // Update one Notes
     * const notes = await prisma.notes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends notesUpdateArgs>(
      args: SelectSubset<T, notesUpdateArgs>
    ): Prisma__notesClient<notesGetPayload<T>>

    /**
     * Delete zero or more Notes.
     * @param {notesDeleteManyArgs} args - Arguments to filter Notes to delete.
     * @example
     * // Delete a few Notes
     * const { count } = await prisma.notes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends notesDeleteManyArgs>(
      args?: SelectSubset<T, notesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notes
     * const notes = await prisma.notes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends notesUpdateManyArgs>(
      args: SelectSubset<T, notesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notes.
     * @param {notesUpsertArgs} args - Arguments to update or create a Notes.
     * @example
     * // Update or create a Notes
     * const notes = await prisma.notes.upsert({
     *   create: {
     *     // ... data to create a Notes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notes we want to update
     *   }
     * })
    **/
    upsert<T extends notesUpsertArgs>(
      args: SelectSubset<T, notesUpsertArgs>
    ): Prisma__notesClient<notesGetPayload<T>>

    /**
     * Count the number of Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notesCountArgs} args - Arguments to filter Notes to count.
     * @example
     * // Count the number of Notes
     * const count = await prisma.notes.count({
     *   where: {
     *     // ... the filter for the Notes we want to count
     *   }
     * })
    **/
    count<T extends notesCountArgs>(
      args?: Subset<T, notesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotesAggregateArgs>(args: Subset<T, NotesAggregateArgs>): Prisma.PrismaPromise<GetNotesAggregateType<T>>

    /**
     * Group by Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotesGroupByArgs['orderBy'] }
        : { orderBy?: NotesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for notes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__notesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    devices<T extends devicesArgs= {}>(args?: Subset<T, devicesArgs>): Prisma__devicesClient<devicesGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * notes base type for findUnique actions
   */
  export type notesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the notes
     */
    select?: notesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notesInclude | null
    /**
     * Filter, which notes to fetch.
     */
    where: notesWhereUniqueInput
  }

  /**
   * notes findUnique
   */
  export interface notesFindUniqueArgs extends notesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * notes findUniqueOrThrow
   */
  export type notesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the notes
     */
    select?: notesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notesInclude | null
    /**
     * Filter, which notes to fetch.
     */
    where: notesWhereUniqueInput
  }


  /**
   * notes base type for findFirst actions
   */
  export type notesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the notes
     */
    select?: notesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notesInclude | null
    /**
     * Filter, which notes to fetch.
     */
    where?: notesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notes to fetch.
     */
    orderBy?: Enumerable<notesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for notes.
     */
    cursor?: notesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of notes.
     */
    distinct?: Enumerable<NotesScalarFieldEnum>
  }

  /**
   * notes findFirst
   */
  export interface notesFindFirstArgs extends notesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * notes findFirstOrThrow
   */
  export type notesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the notes
     */
    select?: notesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notesInclude | null
    /**
     * Filter, which notes to fetch.
     */
    where?: notesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notes to fetch.
     */
    orderBy?: Enumerable<notesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for notes.
     */
    cursor?: notesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of notes.
     */
    distinct?: Enumerable<NotesScalarFieldEnum>
  }


  /**
   * notes findMany
   */
  export type notesFindManyArgs = {
    /**
     * Select specific fields to fetch from the notes
     */
    select?: notesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notesInclude | null
    /**
     * Filter, which notes to fetch.
     */
    where?: notesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notes to fetch.
     */
    orderBy?: Enumerable<notesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing notes.
     */
    cursor?: notesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notes.
     */
    skip?: number
    distinct?: Enumerable<NotesScalarFieldEnum>
  }


  /**
   * notes create
   */
  export type notesCreateArgs = {
    /**
     * Select specific fields to fetch from the notes
     */
    select?: notesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notesInclude | null
    /**
     * The data needed to create a notes.
     */
    data: XOR<notesCreateInput, notesUncheckedCreateInput>
  }


  /**
   * notes createMany
   */
  export type notesCreateManyArgs = {
    /**
     * The data used to create many notes.
     */
    data: Enumerable<notesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * notes update
   */
  export type notesUpdateArgs = {
    /**
     * Select specific fields to fetch from the notes
     */
    select?: notesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notesInclude | null
    /**
     * The data needed to update a notes.
     */
    data: XOR<notesUpdateInput, notesUncheckedUpdateInput>
    /**
     * Choose, which notes to update.
     */
    where: notesWhereUniqueInput
  }


  /**
   * notes updateMany
   */
  export type notesUpdateManyArgs = {
    /**
     * The data used to update notes.
     */
    data: XOR<notesUpdateManyMutationInput, notesUncheckedUpdateManyInput>
    /**
     * Filter which notes to update
     */
    where?: notesWhereInput
  }


  /**
   * notes upsert
   */
  export type notesUpsertArgs = {
    /**
     * Select specific fields to fetch from the notes
     */
    select?: notesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notesInclude | null
    /**
     * The filter to search for the notes to update in case it exists.
     */
    where: notesWhereUniqueInput
    /**
     * In case the notes found by the `where` argument doesn't exist, create a new notes with this data.
     */
    create: XOR<notesCreateInput, notesUncheckedCreateInput>
    /**
     * In case the notes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<notesUpdateInput, notesUncheckedUpdateInput>
  }


  /**
   * notes delete
   */
  export type notesDeleteArgs = {
    /**
     * Select specific fields to fetch from the notes
     */
    select?: notesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notesInclude | null
    /**
     * Filter which notes to delete.
     */
    where: notesWhereUniqueInput
  }


  /**
   * notes deleteMany
   */
  export type notesDeleteManyArgs = {
    /**
     * Filter which notes to delete
     */
    where?: notesWhereInput
  }


  /**
   * notes without action
   */
  export type notesArgs = {
    /**
     * Select specific fields to fetch from the notes
     */
    select?: notesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: notesInclude | null
  }



  /**
   * Model reminders
   */


  export type AggregateReminders = {
    _count: RemindersCountAggregateOutputType | null
    _min: RemindersMinAggregateOutputType | null
    _max: RemindersMaxAggregateOutputType | null
  }

  export type RemindersMinAggregateOutputType = {
    id: string | null
    time: string | null
    message: string | null
    isComing: boolean | null
    deviceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RemindersMaxAggregateOutputType = {
    id: string | null
    time: string | null
    message: string | null
    isComing: boolean | null
    deviceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RemindersCountAggregateOutputType = {
    id: number
    time: number
    message: number
    isComing: number
    deviceId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RemindersMinAggregateInputType = {
    id?: true
    time?: true
    message?: true
    isComing?: true
    deviceId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RemindersMaxAggregateInputType = {
    id?: true
    time?: true
    message?: true
    isComing?: true
    deviceId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RemindersCountAggregateInputType = {
    id?: true
    time?: true
    message?: true
    isComing?: true
    deviceId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RemindersAggregateArgs = {
    /**
     * Filter which reminders to aggregate.
     */
    where?: remindersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reminders to fetch.
     */
    orderBy?: Enumerable<remindersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: remindersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reminders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reminders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reminders
    **/
    _count?: true | RemindersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RemindersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RemindersMaxAggregateInputType
  }

  export type GetRemindersAggregateType<T extends RemindersAggregateArgs> = {
        [P in keyof T & keyof AggregateReminders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReminders[P]>
      : GetScalarType<T[P], AggregateReminders[P]>
  }




  export type RemindersGroupByArgs = {
    where?: remindersWhereInput
    orderBy?: Enumerable<remindersOrderByWithAggregationInput>
    by: RemindersScalarFieldEnum[]
    having?: remindersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RemindersCountAggregateInputType | true
    _min?: RemindersMinAggregateInputType
    _max?: RemindersMaxAggregateInputType
  }


  export type RemindersGroupByOutputType = {
    id: string
    time: string
    message: string | null
    isComing: boolean
    deviceId: string | null
    createdAt: Date
    updatedAt: Date
    _count: RemindersCountAggregateOutputType | null
    _min: RemindersMinAggregateOutputType | null
    _max: RemindersMaxAggregateOutputType | null
  }

  type GetRemindersGroupByPayload<T extends RemindersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RemindersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RemindersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RemindersGroupByOutputType[P]>
            : GetScalarType<T[P], RemindersGroupByOutputType[P]>
        }
      >
    >


  export type remindersSelect = {
    id?: boolean
    time?: boolean
    message?: boolean
    isComing?: boolean
    deviceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    devices?: boolean | devicesArgs
  }


  export type remindersInclude = {
    devices?: boolean | devicesArgs
  }

  export type remindersGetPayload<S extends boolean | null | undefined | remindersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? reminders :
    S extends undefined ? never :
    S extends { include: any } & (remindersArgs | remindersFindManyArgs)
    ? reminders  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'devices' ? devicesGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (remindersArgs | remindersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'devices' ? devicesGetPayload<S['select'][P]> | null :  P extends keyof reminders ? reminders[P] : never
  } 
      : reminders


  type remindersCountArgs = 
    Omit<remindersFindManyArgs, 'select' | 'include'> & {
      select?: RemindersCountAggregateInputType | true
    }

  export interface remindersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Reminders that matches the filter.
     * @param {remindersFindUniqueArgs} args - Arguments to find a Reminders
     * @example
     * // Get one Reminders
     * const reminders = await prisma.reminders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends remindersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, remindersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'reminders'> extends True ? Prisma__remindersClient<remindersGetPayload<T>> : Prisma__remindersClient<remindersGetPayload<T> | null, null>

    /**
     * Find one Reminders that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {remindersFindUniqueOrThrowArgs} args - Arguments to find a Reminders
     * @example
     * // Get one Reminders
     * const reminders = await prisma.reminders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends remindersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, remindersFindUniqueOrThrowArgs>
    ): Prisma__remindersClient<remindersGetPayload<T>>

    /**
     * Find the first Reminders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {remindersFindFirstArgs} args - Arguments to find a Reminders
     * @example
     * // Get one Reminders
     * const reminders = await prisma.reminders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends remindersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, remindersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'reminders'> extends True ? Prisma__remindersClient<remindersGetPayload<T>> : Prisma__remindersClient<remindersGetPayload<T> | null, null>

    /**
     * Find the first Reminders that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {remindersFindFirstOrThrowArgs} args - Arguments to find a Reminders
     * @example
     * // Get one Reminders
     * const reminders = await prisma.reminders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends remindersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, remindersFindFirstOrThrowArgs>
    ): Prisma__remindersClient<remindersGetPayload<T>>

    /**
     * Find zero or more Reminders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {remindersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reminders
     * const reminders = await prisma.reminders.findMany()
     * 
     * // Get first 10 Reminders
     * const reminders = await prisma.reminders.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const remindersWithIdOnly = await prisma.reminders.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends remindersFindManyArgs>(
      args?: SelectSubset<T, remindersFindManyArgs>
    ): Prisma.PrismaPromise<Array<remindersGetPayload<T>>>

    /**
     * Create a Reminders.
     * @param {remindersCreateArgs} args - Arguments to create a Reminders.
     * @example
     * // Create one Reminders
     * const Reminders = await prisma.reminders.create({
     *   data: {
     *     // ... data to create a Reminders
     *   }
     * })
     * 
    **/
    create<T extends remindersCreateArgs>(
      args: SelectSubset<T, remindersCreateArgs>
    ): Prisma__remindersClient<remindersGetPayload<T>>

    /**
     * Create many Reminders.
     *     @param {remindersCreateManyArgs} args - Arguments to create many Reminders.
     *     @example
     *     // Create many Reminders
     *     const reminders = await prisma.reminders.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends remindersCreateManyArgs>(
      args?: SelectSubset<T, remindersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reminders.
     * @param {remindersDeleteArgs} args - Arguments to delete one Reminders.
     * @example
     * // Delete one Reminders
     * const Reminders = await prisma.reminders.delete({
     *   where: {
     *     // ... filter to delete one Reminders
     *   }
     * })
     * 
    **/
    delete<T extends remindersDeleteArgs>(
      args: SelectSubset<T, remindersDeleteArgs>
    ): Prisma__remindersClient<remindersGetPayload<T>>

    /**
     * Update one Reminders.
     * @param {remindersUpdateArgs} args - Arguments to update one Reminders.
     * @example
     * // Update one Reminders
     * const reminders = await prisma.reminders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends remindersUpdateArgs>(
      args: SelectSubset<T, remindersUpdateArgs>
    ): Prisma__remindersClient<remindersGetPayload<T>>

    /**
     * Delete zero or more Reminders.
     * @param {remindersDeleteManyArgs} args - Arguments to filter Reminders to delete.
     * @example
     * // Delete a few Reminders
     * const { count } = await prisma.reminders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends remindersDeleteManyArgs>(
      args?: SelectSubset<T, remindersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reminders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {remindersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reminders
     * const reminders = await prisma.reminders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends remindersUpdateManyArgs>(
      args: SelectSubset<T, remindersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reminders.
     * @param {remindersUpsertArgs} args - Arguments to update or create a Reminders.
     * @example
     * // Update or create a Reminders
     * const reminders = await prisma.reminders.upsert({
     *   create: {
     *     // ... data to create a Reminders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reminders we want to update
     *   }
     * })
    **/
    upsert<T extends remindersUpsertArgs>(
      args: SelectSubset<T, remindersUpsertArgs>
    ): Prisma__remindersClient<remindersGetPayload<T>>

    /**
     * Count the number of Reminders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {remindersCountArgs} args - Arguments to filter Reminders to count.
     * @example
     * // Count the number of Reminders
     * const count = await prisma.reminders.count({
     *   where: {
     *     // ... the filter for the Reminders we want to count
     *   }
     * })
    **/
    count<T extends remindersCountArgs>(
      args?: Subset<T, remindersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RemindersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reminders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RemindersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RemindersAggregateArgs>(args: Subset<T, RemindersAggregateArgs>): Prisma.PrismaPromise<GetRemindersAggregateType<T>>

    /**
     * Group by Reminders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RemindersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RemindersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RemindersGroupByArgs['orderBy'] }
        : { orderBy?: RemindersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RemindersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRemindersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for reminders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__remindersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    devices<T extends devicesArgs= {}>(args?: Subset<T, devicesArgs>): Prisma__devicesClient<devicesGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * reminders base type for findUnique actions
   */
  export type remindersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the reminders
     */
    select?: remindersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: remindersInclude | null
    /**
     * Filter, which reminders to fetch.
     */
    where: remindersWhereUniqueInput
  }

  /**
   * reminders findUnique
   */
  export interface remindersFindUniqueArgs extends remindersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * reminders findUniqueOrThrow
   */
  export type remindersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the reminders
     */
    select?: remindersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: remindersInclude | null
    /**
     * Filter, which reminders to fetch.
     */
    where: remindersWhereUniqueInput
  }


  /**
   * reminders base type for findFirst actions
   */
  export type remindersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the reminders
     */
    select?: remindersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: remindersInclude | null
    /**
     * Filter, which reminders to fetch.
     */
    where?: remindersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reminders to fetch.
     */
    orderBy?: Enumerable<remindersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reminders.
     */
    cursor?: remindersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reminders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reminders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reminders.
     */
    distinct?: Enumerable<RemindersScalarFieldEnum>
  }

  /**
   * reminders findFirst
   */
  export interface remindersFindFirstArgs extends remindersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * reminders findFirstOrThrow
   */
  export type remindersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the reminders
     */
    select?: remindersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: remindersInclude | null
    /**
     * Filter, which reminders to fetch.
     */
    where?: remindersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reminders to fetch.
     */
    orderBy?: Enumerable<remindersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reminders.
     */
    cursor?: remindersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reminders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reminders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reminders.
     */
    distinct?: Enumerable<RemindersScalarFieldEnum>
  }


  /**
   * reminders findMany
   */
  export type remindersFindManyArgs = {
    /**
     * Select specific fields to fetch from the reminders
     */
    select?: remindersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: remindersInclude | null
    /**
     * Filter, which reminders to fetch.
     */
    where?: remindersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reminders to fetch.
     */
    orderBy?: Enumerable<remindersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reminders.
     */
    cursor?: remindersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reminders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reminders.
     */
    skip?: number
    distinct?: Enumerable<RemindersScalarFieldEnum>
  }


  /**
   * reminders create
   */
  export type remindersCreateArgs = {
    /**
     * Select specific fields to fetch from the reminders
     */
    select?: remindersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: remindersInclude | null
    /**
     * The data needed to create a reminders.
     */
    data: XOR<remindersCreateInput, remindersUncheckedCreateInput>
  }


  /**
   * reminders createMany
   */
  export type remindersCreateManyArgs = {
    /**
     * The data used to create many reminders.
     */
    data: Enumerable<remindersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * reminders update
   */
  export type remindersUpdateArgs = {
    /**
     * Select specific fields to fetch from the reminders
     */
    select?: remindersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: remindersInclude | null
    /**
     * The data needed to update a reminders.
     */
    data: XOR<remindersUpdateInput, remindersUncheckedUpdateInput>
    /**
     * Choose, which reminders to update.
     */
    where: remindersWhereUniqueInput
  }


  /**
   * reminders updateMany
   */
  export type remindersUpdateManyArgs = {
    /**
     * The data used to update reminders.
     */
    data: XOR<remindersUpdateManyMutationInput, remindersUncheckedUpdateManyInput>
    /**
     * Filter which reminders to update
     */
    where?: remindersWhereInput
  }


  /**
   * reminders upsert
   */
  export type remindersUpsertArgs = {
    /**
     * Select specific fields to fetch from the reminders
     */
    select?: remindersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: remindersInclude | null
    /**
     * The filter to search for the reminders to update in case it exists.
     */
    where: remindersWhereUniqueInput
    /**
     * In case the reminders found by the `where` argument doesn't exist, create a new reminders with this data.
     */
    create: XOR<remindersCreateInput, remindersUncheckedCreateInput>
    /**
     * In case the reminders was found with the provided `where` argument, update it with this data.
     */
    update: XOR<remindersUpdateInput, remindersUncheckedUpdateInput>
  }


  /**
   * reminders delete
   */
  export type remindersDeleteArgs = {
    /**
     * Select specific fields to fetch from the reminders
     */
    select?: remindersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: remindersInclude | null
    /**
     * Filter which reminders to delete.
     */
    where: remindersWhereUniqueInput
  }


  /**
   * reminders deleteMany
   */
  export type remindersDeleteManyArgs = {
    /**
     * Filter which reminders to delete
     */
    where?: remindersWhereInput
  }


  /**
   * reminders without action
   */
  export type remindersArgs = {
    /**
     * Select specific fields to fetch from the reminders
     */
    select?: remindersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: remindersInclude | null
  }



  /**
   * Model files
   */


  export type AggregateFiles = {
    _count: FilesCountAggregateOutputType | null
    _min: FilesMinAggregateOutputType | null
    _max: FilesMaxAggregateOutputType | null
  }

  export type FilesMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FilesMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FilesCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FilesMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FilesMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FilesCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FilesAggregateArgs = {
    /**
     * Filter which files to aggregate.
     */
    where?: filesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of files to fetch.
     */
    orderBy?: Enumerable<filesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: filesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned files
    **/
    _count?: true | FilesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FilesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FilesMaxAggregateInputType
  }

  export type GetFilesAggregateType<T extends FilesAggregateArgs> = {
        [P in keyof T & keyof AggregateFiles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFiles[P]>
      : GetScalarType<T[P], AggregateFiles[P]>
  }




  export type FilesGroupByArgs = {
    where?: filesWhereInput
    orderBy?: Enumerable<filesOrderByWithAggregationInput>
    by: FilesScalarFieldEnum[]
    having?: filesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FilesCountAggregateInputType | true
    _min?: FilesMinAggregateInputType
    _max?: FilesMaxAggregateInputType
  }


  export type FilesGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: FilesCountAggregateOutputType | null
    _min: FilesMinAggregateOutputType | null
    _max: FilesMaxAggregateOutputType | null
  }

  type GetFilesGroupByPayload<T extends FilesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FilesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FilesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FilesGroupByOutputType[P]>
            : GetScalarType<T[P], FilesGroupByOutputType[P]>
        }
      >
    >


  export type filesSelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type filesGetPayload<S extends boolean | null | undefined | filesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? files :
    S extends undefined ? never :
    S extends { include: any } & (filesArgs | filesFindManyArgs)
    ? files 
    : S extends { select: any } & (filesArgs | filesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof files ? files[P] : never
  } 
      : files


  type filesCountArgs = 
    Omit<filesFindManyArgs, 'select' | 'include'> & {
      select?: FilesCountAggregateInputType | true
    }

  export interface filesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Files that matches the filter.
     * @param {filesFindUniqueArgs} args - Arguments to find a Files
     * @example
     * // Get one Files
     * const files = await prisma.files.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends filesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, filesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'files'> extends True ? Prisma__filesClient<filesGetPayload<T>> : Prisma__filesClient<filesGetPayload<T> | null, null>

    /**
     * Find one Files that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {filesFindUniqueOrThrowArgs} args - Arguments to find a Files
     * @example
     * // Get one Files
     * const files = await prisma.files.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends filesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, filesFindUniqueOrThrowArgs>
    ): Prisma__filesClient<filesGetPayload<T>>

    /**
     * Find the first Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filesFindFirstArgs} args - Arguments to find a Files
     * @example
     * // Get one Files
     * const files = await prisma.files.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends filesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, filesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'files'> extends True ? Prisma__filesClient<filesGetPayload<T>> : Prisma__filesClient<filesGetPayload<T> | null, null>

    /**
     * Find the first Files that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filesFindFirstOrThrowArgs} args - Arguments to find a Files
     * @example
     * // Get one Files
     * const files = await prisma.files.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends filesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, filesFindFirstOrThrowArgs>
    ): Prisma__filesClient<filesGetPayload<T>>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.files.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.files.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const filesWithIdOnly = await prisma.files.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends filesFindManyArgs>(
      args?: SelectSubset<T, filesFindManyArgs>
    ): Prisma.PrismaPromise<Array<filesGetPayload<T>>>

    /**
     * Create a Files.
     * @param {filesCreateArgs} args - Arguments to create a Files.
     * @example
     * // Create one Files
     * const Files = await prisma.files.create({
     *   data: {
     *     // ... data to create a Files
     *   }
     * })
     * 
    **/
    create<T extends filesCreateArgs>(
      args: SelectSubset<T, filesCreateArgs>
    ): Prisma__filesClient<filesGetPayload<T>>

    /**
     * Create many Files.
     *     @param {filesCreateManyArgs} args - Arguments to create many Files.
     *     @example
     *     // Create many Files
     *     const files = await prisma.files.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends filesCreateManyArgs>(
      args?: SelectSubset<T, filesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Files.
     * @param {filesDeleteArgs} args - Arguments to delete one Files.
     * @example
     * // Delete one Files
     * const Files = await prisma.files.delete({
     *   where: {
     *     // ... filter to delete one Files
     *   }
     * })
     * 
    **/
    delete<T extends filesDeleteArgs>(
      args: SelectSubset<T, filesDeleteArgs>
    ): Prisma__filesClient<filesGetPayload<T>>

    /**
     * Update one Files.
     * @param {filesUpdateArgs} args - Arguments to update one Files.
     * @example
     * // Update one Files
     * const files = await prisma.files.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends filesUpdateArgs>(
      args: SelectSubset<T, filesUpdateArgs>
    ): Prisma__filesClient<filesGetPayload<T>>

    /**
     * Delete zero or more Files.
     * @param {filesDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.files.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends filesDeleteManyArgs>(
      args?: SelectSubset<T, filesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const files = await prisma.files.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends filesUpdateManyArgs>(
      args: SelectSubset<T, filesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Files.
     * @param {filesUpsertArgs} args - Arguments to update or create a Files.
     * @example
     * // Update or create a Files
     * const files = await prisma.files.upsert({
     *   create: {
     *     // ... data to create a Files
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Files we want to update
     *   }
     * })
    **/
    upsert<T extends filesUpsertArgs>(
      args: SelectSubset<T, filesUpsertArgs>
    ): Prisma__filesClient<filesGetPayload<T>>

    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filesCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.files.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends filesCountArgs>(
      args?: Subset<T, filesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FilesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FilesAggregateArgs>(args: Subset<T, FilesAggregateArgs>): Prisma.PrismaPromise<GetFilesAggregateType<T>>

    /**
     * Group by Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FilesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FilesGroupByArgs['orderBy'] }
        : { orderBy?: FilesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FilesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFilesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for files.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__filesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * files base type for findUnique actions
   */
  export type filesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * Filter, which files to fetch.
     */
    where: filesWhereUniqueInput
  }

  /**
   * files findUnique
   */
  export interface filesFindUniqueArgs extends filesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * files findUniqueOrThrow
   */
  export type filesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * Filter, which files to fetch.
     */
    where: filesWhereUniqueInput
  }


  /**
   * files base type for findFirst actions
   */
  export type filesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * Filter, which files to fetch.
     */
    where?: filesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of files to fetch.
     */
    orderBy?: Enumerable<filesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for files.
     */
    cursor?: filesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of files.
     */
    distinct?: Enumerable<FilesScalarFieldEnum>
  }

  /**
   * files findFirst
   */
  export interface filesFindFirstArgs extends filesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * files findFirstOrThrow
   */
  export type filesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * Filter, which files to fetch.
     */
    where?: filesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of files to fetch.
     */
    orderBy?: Enumerable<filesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for files.
     */
    cursor?: filesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of files.
     */
    distinct?: Enumerable<FilesScalarFieldEnum>
  }


  /**
   * files findMany
   */
  export type filesFindManyArgs = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * Filter, which files to fetch.
     */
    where?: filesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of files to fetch.
     */
    orderBy?: Enumerable<filesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing files.
     */
    cursor?: filesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` files.
     */
    skip?: number
    distinct?: Enumerable<FilesScalarFieldEnum>
  }


  /**
   * files create
   */
  export type filesCreateArgs = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * The data needed to create a files.
     */
    data: XOR<filesCreateInput, filesUncheckedCreateInput>
  }


  /**
   * files createMany
   */
  export type filesCreateManyArgs = {
    /**
     * The data used to create many files.
     */
    data: Enumerable<filesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * files update
   */
  export type filesUpdateArgs = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * The data needed to update a files.
     */
    data: XOR<filesUpdateInput, filesUncheckedUpdateInput>
    /**
     * Choose, which files to update.
     */
    where: filesWhereUniqueInput
  }


  /**
   * files updateMany
   */
  export type filesUpdateManyArgs = {
    /**
     * The data used to update files.
     */
    data: XOR<filesUpdateManyMutationInput, filesUncheckedUpdateManyInput>
    /**
     * Filter which files to update
     */
    where?: filesWhereInput
  }


  /**
   * files upsert
   */
  export type filesUpsertArgs = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * The filter to search for the files to update in case it exists.
     */
    where: filesWhereUniqueInput
    /**
     * In case the files found by the `where` argument doesn't exist, create a new files with this data.
     */
    create: XOR<filesCreateInput, filesUncheckedCreateInput>
    /**
     * In case the files was found with the provided `where` argument, update it with this data.
     */
    update: XOR<filesUpdateInput, filesUncheckedUpdateInput>
  }


  /**
   * files delete
   */
  export type filesDeleteArgs = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * Filter which files to delete.
     */
    where: filesWhereUniqueInput
  }


  /**
   * files deleteMany
   */
  export type filesDeleteManyArgs = {
    /**
     * Filter which files to delete
     */
    where?: filesWhereInput
  }


  /**
   * files without action
   */
  export type filesArgs = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
  }



  /**
   * Model appNote
   */


  export type AggregateAppNote = {
    _count: AppNoteCountAggregateOutputType | null
    _min: AppNoteMinAggregateOutputType | null
    _max: AppNoteMaxAggregateOutputType | null
  }

  export type AppNoteMinAggregateOutputType = {
    id: string | null
    note: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppNoteMaxAggregateOutputType = {
    id: string | null
    note: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppNoteCountAggregateOutputType = {
    id: number
    note: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AppNoteMinAggregateInputType = {
    id?: true
    note?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppNoteMaxAggregateInputType = {
    id?: true
    note?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppNoteCountAggregateInputType = {
    id?: true
    note?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AppNoteAggregateArgs = {
    /**
     * Filter which appNote to aggregate.
     */
    where?: appNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of appNotes to fetch.
     */
    orderBy?: Enumerable<appNoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: appNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` appNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` appNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned appNotes
    **/
    _count?: true | AppNoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppNoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppNoteMaxAggregateInputType
  }

  export type GetAppNoteAggregateType<T extends AppNoteAggregateArgs> = {
        [P in keyof T & keyof AggregateAppNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppNote[P]>
      : GetScalarType<T[P], AggregateAppNote[P]>
  }




  export type AppNoteGroupByArgs = {
    where?: appNoteWhereInput
    orderBy?: Enumerable<appNoteOrderByWithAggregationInput>
    by: AppNoteScalarFieldEnum[]
    having?: appNoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppNoteCountAggregateInputType | true
    _min?: AppNoteMinAggregateInputType
    _max?: AppNoteMaxAggregateInputType
  }


  export type AppNoteGroupByOutputType = {
    id: string
    note: string
    createdAt: Date
    updatedAt: Date
    _count: AppNoteCountAggregateOutputType | null
    _min: AppNoteMinAggregateOutputType | null
    _max: AppNoteMaxAggregateOutputType | null
  }

  type GetAppNoteGroupByPayload<T extends AppNoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AppNoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppNoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppNoteGroupByOutputType[P]>
            : GetScalarType<T[P], AppNoteGroupByOutputType[P]>
        }
      >
    >


  export type appNoteSelect = {
    id?: boolean
    note?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type appNoteGetPayload<S extends boolean | null | undefined | appNoteArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? appNote :
    S extends undefined ? never :
    S extends { include: any } & (appNoteArgs | appNoteFindManyArgs)
    ? appNote 
    : S extends { select: any } & (appNoteArgs | appNoteFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof appNote ? appNote[P] : never
  } 
      : appNote


  type appNoteCountArgs = 
    Omit<appNoteFindManyArgs, 'select' | 'include'> & {
      select?: AppNoteCountAggregateInputType | true
    }

  export interface appNoteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one AppNote that matches the filter.
     * @param {appNoteFindUniqueArgs} args - Arguments to find a AppNote
     * @example
     * // Get one AppNote
     * const appNote = await prisma.appNote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends appNoteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, appNoteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'appNote'> extends True ? Prisma__appNoteClient<appNoteGetPayload<T>> : Prisma__appNoteClient<appNoteGetPayload<T> | null, null>

    /**
     * Find one AppNote that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {appNoteFindUniqueOrThrowArgs} args - Arguments to find a AppNote
     * @example
     * // Get one AppNote
     * const appNote = await prisma.appNote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends appNoteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, appNoteFindUniqueOrThrowArgs>
    ): Prisma__appNoteClient<appNoteGetPayload<T>>

    /**
     * Find the first AppNote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {appNoteFindFirstArgs} args - Arguments to find a AppNote
     * @example
     * // Get one AppNote
     * const appNote = await prisma.appNote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends appNoteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, appNoteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'appNote'> extends True ? Prisma__appNoteClient<appNoteGetPayload<T>> : Prisma__appNoteClient<appNoteGetPayload<T> | null, null>

    /**
     * Find the first AppNote that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {appNoteFindFirstOrThrowArgs} args - Arguments to find a AppNote
     * @example
     * // Get one AppNote
     * const appNote = await prisma.appNote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends appNoteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, appNoteFindFirstOrThrowArgs>
    ): Prisma__appNoteClient<appNoteGetPayload<T>>

    /**
     * Find zero or more AppNotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {appNoteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AppNotes
     * const appNotes = await prisma.appNote.findMany()
     * 
     * // Get first 10 AppNotes
     * const appNotes = await prisma.appNote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appNoteWithIdOnly = await prisma.appNote.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends appNoteFindManyArgs>(
      args?: SelectSubset<T, appNoteFindManyArgs>
    ): Prisma.PrismaPromise<Array<appNoteGetPayload<T>>>

    /**
     * Create a AppNote.
     * @param {appNoteCreateArgs} args - Arguments to create a AppNote.
     * @example
     * // Create one AppNote
     * const AppNote = await prisma.appNote.create({
     *   data: {
     *     // ... data to create a AppNote
     *   }
     * })
     * 
    **/
    create<T extends appNoteCreateArgs>(
      args: SelectSubset<T, appNoteCreateArgs>
    ): Prisma__appNoteClient<appNoteGetPayload<T>>

    /**
     * Create many AppNotes.
     *     @param {appNoteCreateManyArgs} args - Arguments to create many AppNotes.
     *     @example
     *     // Create many AppNotes
     *     const appNote = await prisma.appNote.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends appNoteCreateManyArgs>(
      args?: SelectSubset<T, appNoteCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AppNote.
     * @param {appNoteDeleteArgs} args - Arguments to delete one AppNote.
     * @example
     * // Delete one AppNote
     * const AppNote = await prisma.appNote.delete({
     *   where: {
     *     // ... filter to delete one AppNote
     *   }
     * })
     * 
    **/
    delete<T extends appNoteDeleteArgs>(
      args: SelectSubset<T, appNoteDeleteArgs>
    ): Prisma__appNoteClient<appNoteGetPayload<T>>

    /**
     * Update one AppNote.
     * @param {appNoteUpdateArgs} args - Arguments to update one AppNote.
     * @example
     * // Update one AppNote
     * const appNote = await prisma.appNote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends appNoteUpdateArgs>(
      args: SelectSubset<T, appNoteUpdateArgs>
    ): Prisma__appNoteClient<appNoteGetPayload<T>>

    /**
     * Delete zero or more AppNotes.
     * @param {appNoteDeleteManyArgs} args - Arguments to filter AppNotes to delete.
     * @example
     * // Delete a few AppNotes
     * const { count } = await prisma.appNote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends appNoteDeleteManyArgs>(
      args?: SelectSubset<T, appNoteDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {appNoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AppNotes
     * const appNote = await prisma.appNote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends appNoteUpdateManyArgs>(
      args: SelectSubset<T, appNoteUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AppNote.
     * @param {appNoteUpsertArgs} args - Arguments to update or create a AppNote.
     * @example
     * // Update or create a AppNote
     * const appNote = await prisma.appNote.upsert({
     *   create: {
     *     // ... data to create a AppNote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AppNote we want to update
     *   }
     * })
    **/
    upsert<T extends appNoteUpsertArgs>(
      args: SelectSubset<T, appNoteUpsertArgs>
    ): Prisma__appNoteClient<appNoteGetPayload<T>>

    /**
     * Count the number of AppNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {appNoteCountArgs} args - Arguments to filter AppNotes to count.
     * @example
     * // Count the number of AppNotes
     * const count = await prisma.appNote.count({
     *   where: {
     *     // ... the filter for the AppNotes we want to count
     *   }
     * })
    **/
    count<T extends appNoteCountArgs>(
      args?: Subset<T, appNoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppNoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AppNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppNoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppNoteAggregateArgs>(args: Subset<T, AppNoteAggregateArgs>): Prisma.PrismaPromise<GetAppNoteAggregateType<T>>

    /**
     * Group by AppNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppNoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppNoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppNoteGroupByArgs['orderBy'] }
        : { orderBy?: AppNoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppNoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for appNote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__appNoteClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * appNote base type for findUnique actions
   */
  export type appNoteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the appNote
     */
    select?: appNoteSelect | null
    /**
     * Filter, which appNote to fetch.
     */
    where: appNoteWhereUniqueInput
  }

  /**
   * appNote findUnique
   */
  export interface appNoteFindUniqueArgs extends appNoteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * appNote findUniqueOrThrow
   */
  export type appNoteFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the appNote
     */
    select?: appNoteSelect | null
    /**
     * Filter, which appNote to fetch.
     */
    where: appNoteWhereUniqueInput
  }


  /**
   * appNote base type for findFirst actions
   */
  export type appNoteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the appNote
     */
    select?: appNoteSelect | null
    /**
     * Filter, which appNote to fetch.
     */
    where?: appNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of appNotes to fetch.
     */
    orderBy?: Enumerable<appNoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for appNotes.
     */
    cursor?: appNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` appNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` appNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of appNotes.
     */
    distinct?: Enumerable<AppNoteScalarFieldEnum>
  }

  /**
   * appNote findFirst
   */
  export interface appNoteFindFirstArgs extends appNoteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * appNote findFirstOrThrow
   */
  export type appNoteFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the appNote
     */
    select?: appNoteSelect | null
    /**
     * Filter, which appNote to fetch.
     */
    where?: appNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of appNotes to fetch.
     */
    orderBy?: Enumerable<appNoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for appNotes.
     */
    cursor?: appNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` appNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` appNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of appNotes.
     */
    distinct?: Enumerable<AppNoteScalarFieldEnum>
  }


  /**
   * appNote findMany
   */
  export type appNoteFindManyArgs = {
    /**
     * Select specific fields to fetch from the appNote
     */
    select?: appNoteSelect | null
    /**
     * Filter, which appNotes to fetch.
     */
    where?: appNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of appNotes to fetch.
     */
    orderBy?: Enumerable<appNoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing appNotes.
     */
    cursor?: appNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` appNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` appNotes.
     */
    skip?: number
    distinct?: Enumerable<AppNoteScalarFieldEnum>
  }


  /**
   * appNote create
   */
  export type appNoteCreateArgs = {
    /**
     * Select specific fields to fetch from the appNote
     */
    select?: appNoteSelect | null
    /**
     * The data needed to create a appNote.
     */
    data: XOR<appNoteCreateInput, appNoteUncheckedCreateInput>
  }


  /**
   * appNote createMany
   */
  export type appNoteCreateManyArgs = {
    /**
     * The data used to create many appNotes.
     */
    data: Enumerable<appNoteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * appNote update
   */
  export type appNoteUpdateArgs = {
    /**
     * Select specific fields to fetch from the appNote
     */
    select?: appNoteSelect | null
    /**
     * The data needed to update a appNote.
     */
    data: XOR<appNoteUpdateInput, appNoteUncheckedUpdateInput>
    /**
     * Choose, which appNote to update.
     */
    where: appNoteWhereUniqueInput
  }


  /**
   * appNote updateMany
   */
  export type appNoteUpdateManyArgs = {
    /**
     * The data used to update appNotes.
     */
    data: XOR<appNoteUpdateManyMutationInput, appNoteUncheckedUpdateManyInput>
    /**
     * Filter which appNotes to update
     */
    where?: appNoteWhereInput
  }


  /**
   * appNote upsert
   */
  export type appNoteUpsertArgs = {
    /**
     * Select specific fields to fetch from the appNote
     */
    select?: appNoteSelect | null
    /**
     * The filter to search for the appNote to update in case it exists.
     */
    where: appNoteWhereUniqueInput
    /**
     * In case the appNote found by the `where` argument doesn't exist, create a new appNote with this data.
     */
    create: XOR<appNoteCreateInput, appNoteUncheckedCreateInput>
    /**
     * In case the appNote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<appNoteUpdateInput, appNoteUncheckedUpdateInput>
  }


  /**
   * appNote delete
   */
  export type appNoteDeleteArgs = {
    /**
     * Select specific fields to fetch from the appNote
     */
    select?: appNoteSelect | null
    /**
     * Filter which appNote to delete.
     */
    where: appNoteWhereUniqueInput
  }


  /**
   * appNote deleteMany
   */
  export type appNoteDeleteManyArgs = {
    /**
     * Filter which appNotes to delete
     */
    where?: appNoteWhereInput
  }


  /**
   * appNote without action
   */
  export type appNoteArgs = {
    /**
     * Select specific fields to fetch from the appNote
     */
    select?: appNoteSelect | null
  }



  /**
   * Enums
   */

  export const AppNoteScalarFieldEnum: {
    id: 'id',
    note: 'note',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AppNoteScalarFieldEnum = (typeof AppNoteScalarFieldEnum)[keyof typeof AppNoteScalarFieldEnum]


  export const DevicesScalarFieldEnum: {
    id: 'id',
    anlagenID: 'anlagenID',
    seriennr: 'seriennr',
    gehortzu: 'gehortzu',
    anlagenbez: 'anlagenbez',
    typModell: 'typModell',
    hersteller: 'hersteller',
    lieferant: 'lieferant',
    servicestelle: 'servicestelle',
    abteilung: 'abteilung',
    kostenstelle: 'kostenstelle',
    SLA: 'SLA',
    preisProSLA: 'preisProSLA',
    status: 'status',
    raumbezMT: 'raumbezMT',
    contact: 'contact',
    date: 'date',
    email: 'email',
    telephone: 'telephone',
    companyName: 'companyName',
    isRequested: 'isRequested',
    isDone: 'isDone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DevicesScalarFieldEnum = (typeof DevicesScalarFieldEnum)[keyof typeof DevicesScalarFieldEnum]


  export const FilesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FilesScalarFieldEnum = (typeof FilesScalarFieldEnum)[keyof typeof FilesScalarFieldEnum]


  export const ImagesScalarFieldEnum: {
    id: 'id',
    deviceId: 'deviceId',
    imageURL: 'imageURL',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ImagesScalarFieldEnum = (typeof ImagesScalarFieldEnum)[keyof typeof ImagesScalarFieldEnum]


  export const NotesScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    deviceId: 'deviceId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotesScalarFieldEnum = (typeof NotesScalarFieldEnum)[keyof typeof NotesScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const RemindersScalarFieldEnum: {
    id: 'id',
    time: 'time',
    message: 'message',
    isComing: 'isComing',
    deviceId: 'deviceId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RemindersScalarFieldEnum = (typeof RemindersScalarFieldEnum)[keyof typeof RemindersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type devicesWhereInput = {
    AND?: Enumerable<devicesWhereInput>
    OR?: Enumerable<devicesWhereInput>
    NOT?: Enumerable<devicesWhereInput>
    id?: StringFilter | string
    anlagenID?: StringNullableFilter | string | null
    seriennr?: StringNullableFilter | string | null
    gehortzu?: StringNullableFilter | string | null
    anlagenbez?: StringNullableFilter | string | null
    typModell?: StringNullableFilter | string | null
    hersteller?: StringNullableFilter | string | null
    lieferant?: StringNullableFilter | string | null
    servicestelle?: StringNullableFilter | string | null
    abteilung?: StringNullableFilter | string | null
    kostenstelle?: StringNullableFilter | string | null
    SLA?: StringNullableFilter | string | null
    preisProSLA?: StringNullableFilter | string | null
    status?: StringNullableFilter | string | null
    raumbezMT?: StringNullableFilter | string | null
    contact?: StringNullableFilter | string | null
    date?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    telephone?: StringNullableFilter | string | null
    companyName?: StringNullableFilter | string | null
    isRequested?: BoolNullableFilter | boolean | null
    isDone?: BoolNullableFilter | boolean | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    images?: ImagesListRelationFilter
    reminders?: RemindersListRelationFilter
    notes?: NotesListRelationFilter
  }

  export type devicesOrderByWithRelationInput = {
    id?: SortOrder
    anlagenID?: SortOrder
    seriennr?: SortOrder
    gehortzu?: SortOrder
    anlagenbez?: SortOrder
    typModell?: SortOrder
    hersteller?: SortOrder
    lieferant?: SortOrder
    servicestelle?: SortOrder
    abteilung?: SortOrder
    kostenstelle?: SortOrder
    SLA?: SortOrder
    preisProSLA?: SortOrder
    status?: SortOrder
    raumbezMT?: SortOrder
    contact?: SortOrder
    date?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    companyName?: SortOrder
    isRequested?: SortOrder
    isDone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    images?: imagesOrderByRelationAggregateInput
    reminders?: remindersOrderByRelationAggregateInput
    notes?: notesOrderByRelationAggregateInput
  }

  export type devicesWhereUniqueInput = {
    id?: string
  }

  export type devicesOrderByWithAggregationInput = {
    id?: SortOrder
    anlagenID?: SortOrder
    seriennr?: SortOrder
    gehortzu?: SortOrder
    anlagenbez?: SortOrder
    typModell?: SortOrder
    hersteller?: SortOrder
    lieferant?: SortOrder
    servicestelle?: SortOrder
    abteilung?: SortOrder
    kostenstelle?: SortOrder
    SLA?: SortOrder
    preisProSLA?: SortOrder
    status?: SortOrder
    raumbezMT?: SortOrder
    contact?: SortOrder
    date?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    companyName?: SortOrder
    isRequested?: SortOrder
    isDone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: devicesCountOrderByAggregateInput
    _max?: devicesMaxOrderByAggregateInput
    _min?: devicesMinOrderByAggregateInput
  }

  export type devicesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<devicesScalarWhereWithAggregatesInput>
    OR?: Enumerable<devicesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<devicesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    anlagenID?: StringNullableWithAggregatesFilter | string | null
    seriennr?: StringNullableWithAggregatesFilter | string | null
    gehortzu?: StringNullableWithAggregatesFilter | string | null
    anlagenbez?: StringNullableWithAggregatesFilter | string | null
    typModell?: StringNullableWithAggregatesFilter | string | null
    hersteller?: StringNullableWithAggregatesFilter | string | null
    lieferant?: StringNullableWithAggregatesFilter | string | null
    servicestelle?: StringNullableWithAggregatesFilter | string | null
    abteilung?: StringNullableWithAggregatesFilter | string | null
    kostenstelle?: StringNullableWithAggregatesFilter | string | null
    SLA?: StringNullableWithAggregatesFilter | string | null
    preisProSLA?: StringNullableWithAggregatesFilter | string | null
    status?: StringNullableWithAggregatesFilter | string | null
    raumbezMT?: StringNullableWithAggregatesFilter | string | null
    contact?: StringNullableWithAggregatesFilter | string | null
    date?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    telephone?: StringNullableWithAggregatesFilter | string | null
    companyName?: StringNullableWithAggregatesFilter | string | null
    isRequested?: BoolNullableWithAggregatesFilter | boolean | null
    isDone?: BoolNullableWithAggregatesFilter | boolean | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type imagesWhereInput = {
    AND?: Enumerable<imagesWhereInput>
    OR?: Enumerable<imagesWhereInput>
    NOT?: Enumerable<imagesWhereInput>
    id?: StringFilter | string
    deviceId?: StringNullableFilter | string | null
    imageURL?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    devices?: XOR<DevicesRelationFilter, devicesWhereInput> | null
  }

  export type imagesOrderByWithRelationInput = {
    id?: SortOrder
    deviceId?: SortOrder
    imageURL?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    devices?: devicesOrderByWithRelationInput
  }

  export type imagesWhereUniqueInput = {
    id?: string
  }

  export type imagesOrderByWithAggregationInput = {
    id?: SortOrder
    deviceId?: SortOrder
    imageURL?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: imagesCountOrderByAggregateInput
    _max?: imagesMaxOrderByAggregateInput
    _min?: imagesMinOrderByAggregateInput
  }

  export type imagesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<imagesScalarWhereWithAggregatesInput>
    OR?: Enumerable<imagesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<imagesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    deviceId?: StringNullableWithAggregatesFilter | string | null
    imageURL?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type notesWhereInput = {
    AND?: Enumerable<notesWhereInput>
    OR?: Enumerable<notesWhereInput>
    NOT?: Enumerable<notesWhereInput>
    id?: StringFilter | string
    title?: StringNullableFilter | string | null
    content?: StringFilter | string
    deviceId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    devices?: XOR<DevicesRelationFilter, devicesWhereInput> | null
  }

  export type notesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    deviceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    devices?: devicesOrderByWithRelationInput
  }

  export type notesWhereUniqueInput = {
    id?: string
  }

  export type notesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    deviceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: notesCountOrderByAggregateInput
    _max?: notesMaxOrderByAggregateInput
    _min?: notesMinOrderByAggregateInput
  }

  export type notesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<notesScalarWhereWithAggregatesInput>
    OR?: Enumerable<notesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<notesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringNullableWithAggregatesFilter | string | null
    content?: StringWithAggregatesFilter | string
    deviceId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type remindersWhereInput = {
    AND?: Enumerable<remindersWhereInput>
    OR?: Enumerable<remindersWhereInput>
    NOT?: Enumerable<remindersWhereInput>
    id?: StringFilter | string
    time?: StringFilter | string
    message?: StringNullableFilter | string | null
    isComing?: BoolFilter | boolean
    deviceId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    devices?: XOR<DevicesRelationFilter, devicesWhereInput> | null
  }

  export type remindersOrderByWithRelationInput = {
    id?: SortOrder
    time?: SortOrder
    message?: SortOrder
    isComing?: SortOrder
    deviceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    devices?: devicesOrderByWithRelationInput
  }

  export type remindersWhereUniqueInput = {
    id?: string
  }

  export type remindersOrderByWithAggregationInput = {
    id?: SortOrder
    time?: SortOrder
    message?: SortOrder
    isComing?: SortOrder
    deviceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: remindersCountOrderByAggregateInput
    _max?: remindersMaxOrderByAggregateInput
    _min?: remindersMinOrderByAggregateInput
  }

  export type remindersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<remindersScalarWhereWithAggregatesInput>
    OR?: Enumerable<remindersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<remindersScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    time?: StringWithAggregatesFilter | string
    message?: StringNullableWithAggregatesFilter | string | null
    isComing?: BoolWithAggregatesFilter | boolean
    deviceId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type filesWhereInput = {
    AND?: Enumerable<filesWhereInput>
    OR?: Enumerable<filesWhereInput>
    NOT?: Enumerable<filesWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type filesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type filesWhereUniqueInput = {
    id?: string
  }

  export type filesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: filesCountOrderByAggregateInput
    _max?: filesMaxOrderByAggregateInput
    _min?: filesMinOrderByAggregateInput
  }

  export type filesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<filesScalarWhereWithAggregatesInput>
    OR?: Enumerable<filesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<filesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type appNoteWhereInput = {
    AND?: Enumerable<appNoteWhereInput>
    OR?: Enumerable<appNoteWhereInput>
    NOT?: Enumerable<appNoteWhereInput>
    id?: StringFilter | string
    note?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type appNoteOrderByWithRelationInput = {
    id?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type appNoteWhereUniqueInput = {
    id?: string
  }

  export type appNoteOrderByWithAggregationInput = {
    id?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: appNoteCountOrderByAggregateInput
    _max?: appNoteMaxOrderByAggregateInput
    _min?: appNoteMinOrderByAggregateInput
  }

  export type appNoteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<appNoteScalarWhereWithAggregatesInput>
    OR?: Enumerable<appNoteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<appNoteScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    note?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type devicesCreateInput = {
    id?: string
    anlagenID?: string | null
    seriennr?: string | null
    gehortzu?: string | null
    anlagenbez?: string | null
    typModell?: string | null
    hersteller?: string | null
    lieferant?: string | null
    servicestelle?: string | null
    abteilung?: string | null
    kostenstelle?: string | null
    SLA?: string | null
    preisProSLA?: string | null
    status?: string | null
    raumbezMT?: string | null
    contact?: string | null
    date?: string | null
    email?: string | null
    telephone?: string | null
    companyName?: string | null
    isRequested?: boolean | null
    isDone?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: imagesCreateNestedManyWithoutDevicesInput
    reminders?: remindersCreateNestedManyWithoutDevicesInput
    notes?: notesCreateNestedManyWithoutDevicesInput
  }

  export type devicesUncheckedCreateInput = {
    id?: string
    anlagenID?: string | null
    seriennr?: string | null
    gehortzu?: string | null
    anlagenbez?: string | null
    typModell?: string | null
    hersteller?: string | null
    lieferant?: string | null
    servicestelle?: string | null
    abteilung?: string | null
    kostenstelle?: string | null
    SLA?: string | null
    preisProSLA?: string | null
    status?: string | null
    raumbezMT?: string | null
    contact?: string | null
    date?: string | null
    email?: string | null
    telephone?: string | null
    companyName?: string | null
    isRequested?: boolean | null
    isDone?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: imagesUncheckedCreateNestedManyWithoutDevicesInput
    reminders?: remindersUncheckedCreateNestedManyWithoutDevicesInput
    notes?: notesUncheckedCreateNestedManyWithoutDevicesInput
  }

  export type devicesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    anlagenID?: NullableStringFieldUpdateOperationsInput | string | null
    seriennr?: NullableStringFieldUpdateOperationsInput | string | null
    gehortzu?: NullableStringFieldUpdateOperationsInput | string | null
    anlagenbez?: NullableStringFieldUpdateOperationsInput | string | null
    typModell?: NullableStringFieldUpdateOperationsInput | string | null
    hersteller?: NullableStringFieldUpdateOperationsInput | string | null
    lieferant?: NullableStringFieldUpdateOperationsInput | string | null
    servicestelle?: NullableStringFieldUpdateOperationsInput | string | null
    abteilung?: NullableStringFieldUpdateOperationsInput | string | null
    kostenstelle?: NullableStringFieldUpdateOperationsInput | string | null
    SLA?: NullableStringFieldUpdateOperationsInput | string | null
    preisProSLA?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    raumbezMT?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    isRequested?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: imagesUpdateManyWithoutDevicesNestedInput
    reminders?: remindersUpdateManyWithoutDevicesNestedInput
    notes?: notesUpdateManyWithoutDevicesNestedInput
  }

  export type devicesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    anlagenID?: NullableStringFieldUpdateOperationsInput | string | null
    seriennr?: NullableStringFieldUpdateOperationsInput | string | null
    gehortzu?: NullableStringFieldUpdateOperationsInput | string | null
    anlagenbez?: NullableStringFieldUpdateOperationsInput | string | null
    typModell?: NullableStringFieldUpdateOperationsInput | string | null
    hersteller?: NullableStringFieldUpdateOperationsInput | string | null
    lieferant?: NullableStringFieldUpdateOperationsInput | string | null
    servicestelle?: NullableStringFieldUpdateOperationsInput | string | null
    abteilung?: NullableStringFieldUpdateOperationsInput | string | null
    kostenstelle?: NullableStringFieldUpdateOperationsInput | string | null
    SLA?: NullableStringFieldUpdateOperationsInput | string | null
    preisProSLA?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    raumbezMT?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    isRequested?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: imagesUncheckedUpdateManyWithoutDevicesNestedInput
    reminders?: remindersUncheckedUpdateManyWithoutDevicesNestedInput
    notes?: notesUncheckedUpdateManyWithoutDevicesNestedInput
  }

  export type devicesCreateManyInput = {
    id?: string
    anlagenID?: string | null
    seriennr?: string | null
    gehortzu?: string | null
    anlagenbez?: string | null
    typModell?: string | null
    hersteller?: string | null
    lieferant?: string | null
    servicestelle?: string | null
    abteilung?: string | null
    kostenstelle?: string | null
    SLA?: string | null
    preisProSLA?: string | null
    status?: string | null
    raumbezMT?: string | null
    contact?: string | null
    date?: string | null
    email?: string | null
    telephone?: string | null
    companyName?: string | null
    isRequested?: boolean | null
    isDone?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type devicesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    anlagenID?: NullableStringFieldUpdateOperationsInput | string | null
    seriennr?: NullableStringFieldUpdateOperationsInput | string | null
    gehortzu?: NullableStringFieldUpdateOperationsInput | string | null
    anlagenbez?: NullableStringFieldUpdateOperationsInput | string | null
    typModell?: NullableStringFieldUpdateOperationsInput | string | null
    hersteller?: NullableStringFieldUpdateOperationsInput | string | null
    lieferant?: NullableStringFieldUpdateOperationsInput | string | null
    servicestelle?: NullableStringFieldUpdateOperationsInput | string | null
    abteilung?: NullableStringFieldUpdateOperationsInput | string | null
    kostenstelle?: NullableStringFieldUpdateOperationsInput | string | null
    SLA?: NullableStringFieldUpdateOperationsInput | string | null
    preisProSLA?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    raumbezMT?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    isRequested?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type devicesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    anlagenID?: NullableStringFieldUpdateOperationsInput | string | null
    seriennr?: NullableStringFieldUpdateOperationsInput | string | null
    gehortzu?: NullableStringFieldUpdateOperationsInput | string | null
    anlagenbez?: NullableStringFieldUpdateOperationsInput | string | null
    typModell?: NullableStringFieldUpdateOperationsInput | string | null
    hersteller?: NullableStringFieldUpdateOperationsInput | string | null
    lieferant?: NullableStringFieldUpdateOperationsInput | string | null
    servicestelle?: NullableStringFieldUpdateOperationsInput | string | null
    abteilung?: NullableStringFieldUpdateOperationsInput | string | null
    kostenstelle?: NullableStringFieldUpdateOperationsInput | string | null
    SLA?: NullableStringFieldUpdateOperationsInput | string | null
    preisProSLA?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    raumbezMT?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    isRequested?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type imagesCreateInput = {
    id?: string
    imageURL: string
    createdAt?: Date | string
    updatedAt?: Date | string
    devices?: devicesCreateNestedOneWithoutImagesInput
  }

  export type imagesUncheckedCreateInput = {
    id?: string
    deviceId?: string | null
    imageURL: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type imagesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageURL?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    devices?: devicesUpdateOneWithoutImagesNestedInput
  }

  export type imagesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: NullableStringFieldUpdateOperationsInput | string | null
    imageURL?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type imagesCreateManyInput = {
    id?: string
    deviceId?: string | null
    imageURL: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type imagesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageURL?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type imagesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: NullableStringFieldUpdateOperationsInput | string | null
    imageURL?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type notesCreateInput = {
    id?: string
    title?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    devices?: devicesCreateNestedOneWithoutNotesInput
  }

  export type notesUncheckedCreateInput = {
    id?: string
    title?: string | null
    content: string
    deviceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type notesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    devices?: devicesUpdateOneWithoutNotesNestedInput
  }

  export type notesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    deviceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type notesCreateManyInput = {
    id?: string
    title?: string | null
    content: string
    deviceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type notesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type notesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    deviceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type remindersCreateInput = {
    id?: string
    time: string
    message?: string | null
    isComing: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    devices?: devicesCreateNestedOneWithoutRemindersInput
  }

  export type remindersUncheckedCreateInput = {
    id?: string
    time: string
    message?: string | null
    isComing: boolean
    deviceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type remindersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    isComing?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    devices?: devicesUpdateOneWithoutRemindersNestedInput
  }

  export type remindersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    isComing?: BoolFieldUpdateOperationsInput | boolean
    deviceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type remindersCreateManyInput = {
    id?: string
    time: string
    message?: string | null
    isComing: boolean
    deviceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type remindersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    isComing?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type remindersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    isComing?: BoolFieldUpdateOperationsInput | boolean
    deviceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type filesCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type filesUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type filesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type filesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type filesCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type filesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type filesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type appNoteCreateInput = {
    id?: string
    note: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type appNoteUncheckedCreateInput = {
    id?: string
    note: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type appNoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type appNoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type appNoteCreateManyInput = {
    id?: string
    note: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type appNoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type appNoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type ImagesListRelationFilter = {
    every?: imagesWhereInput
    some?: imagesWhereInput
    none?: imagesWhereInput
  }

  export type RemindersListRelationFilter = {
    every?: remindersWhereInput
    some?: remindersWhereInput
    none?: remindersWhereInput
  }

  export type NotesListRelationFilter = {
    every?: notesWhereInput
    some?: notesWhereInput
    none?: notesWhereInput
  }

  export type imagesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type remindersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type notesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type devicesCountOrderByAggregateInput = {
    id?: SortOrder
    anlagenID?: SortOrder
    seriennr?: SortOrder
    gehortzu?: SortOrder
    anlagenbez?: SortOrder
    typModell?: SortOrder
    hersteller?: SortOrder
    lieferant?: SortOrder
    servicestelle?: SortOrder
    abteilung?: SortOrder
    kostenstelle?: SortOrder
    SLA?: SortOrder
    preisProSLA?: SortOrder
    status?: SortOrder
    raumbezMT?: SortOrder
    contact?: SortOrder
    date?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    companyName?: SortOrder
    isRequested?: SortOrder
    isDone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type devicesMaxOrderByAggregateInput = {
    id?: SortOrder
    anlagenID?: SortOrder
    seriennr?: SortOrder
    gehortzu?: SortOrder
    anlagenbez?: SortOrder
    typModell?: SortOrder
    hersteller?: SortOrder
    lieferant?: SortOrder
    servicestelle?: SortOrder
    abteilung?: SortOrder
    kostenstelle?: SortOrder
    SLA?: SortOrder
    preisProSLA?: SortOrder
    status?: SortOrder
    raumbezMT?: SortOrder
    contact?: SortOrder
    date?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    companyName?: SortOrder
    isRequested?: SortOrder
    isDone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type devicesMinOrderByAggregateInput = {
    id?: SortOrder
    anlagenID?: SortOrder
    seriennr?: SortOrder
    gehortzu?: SortOrder
    anlagenbez?: SortOrder
    typModell?: SortOrder
    hersteller?: SortOrder
    lieferant?: SortOrder
    servicestelle?: SortOrder
    abteilung?: SortOrder
    kostenstelle?: SortOrder
    SLA?: SortOrder
    preisProSLA?: SortOrder
    status?: SortOrder
    raumbezMT?: SortOrder
    contact?: SortOrder
    date?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    companyName?: SortOrder
    isRequested?: SortOrder
    isDone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DevicesRelationFilter = {
    is?: devicesWhereInput | null
    isNot?: devicesWhereInput | null
  }

  export type imagesCountOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    imageURL?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type imagesMaxOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    imageURL?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type imagesMinOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    imageURL?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type notesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    deviceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type notesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    deviceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type notesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    deviceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type remindersCountOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
    message?: SortOrder
    isComing?: SortOrder
    deviceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type remindersMaxOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
    message?: SortOrder
    isComing?: SortOrder
    deviceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type remindersMinOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
    message?: SortOrder
    isComing?: SortOrder
    deviceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type filesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type filesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type filesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type appNoteCountOrderByAggregateInput = {
    id?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type appNoteMaxOrderByAggregateInput = {
    id?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type appNoteMinOrderByAggregateInput = {
    id?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type imagesCreateNestedManyWithoutDevicesInput = {
    create?: XOR<Enumerable<imagesCreateWithoutDevicesInput>, Enumerable<imagesUncheckedCreateWithoutDevicesInput>>
    connectOrCreate?: Enumerable<imagesCreateOrConnectWithoutDevicesInput>
    createMany?: imagesCreateManyDevicesInputEnvelope
    connect?: Enumerable<imagesWhereUniqueInput>
  }

  export type remindersCreateNestedManyWithoutDevicesInput = {
    create?: XOR<Enumerable<remindersCreateWithoutDevicesInput>, Enumerable<remindersUncheckedCreateWithoutDevicesInput>>
    connectOrCreate?: Enumerable<remindersCreateOrConnectWithoutDevicesInput>
    createMany?: remindersCreateManyDevicesInputEnvelope
    connect?: Enumerable<remindersWhereUniqueInput>
  }

  export type notesCreateNestedManyWithoutDevicesInput = {
    create?: XOR<Enumerable<notesCreateWithoutDevicesInput>, Enumerable<notesUncheckedCreateWithoutDevicesInput>>
    connectOrCreate?: Enumerable<notesCreateOrConnectWithoutDevicesInput>
    createMany?: notesCreateManyDevicesInputEnvelope
    connect?: Enumerable<notesWhereUniqueInput>
  }

  export type imagesUncheckedCreateNestedManyWithoutDevicesInput = {
    create?: XOR<Enumerable<imagesCreateWithoutDevicesInput>, Enumerable<imagesUncheckedCreateWithoutDevicesInput>>
    connectOrCreate?: Enumerable<imagesCreateOrConnectWithoutDevicesInput>
    createMany?: imagesCreateManyDevicesInputEnvelope
    connect?: Enumerable<imagesWhereUniqueInput>
  }

  export type remindersUncheckedCreateNestedManyWithoutDevicesInput = {
    create?: XOR<Enumerable<remindersCreateWithoutDevicesInput>, Enumerable<remindersUncheckedCreateWithoutDevicesInput>>
    connectOrCreate?: Enumerable<remindersCreateOrConnectWithoutDevicesInput>
    createMany?: remindersCreateManyDevicesInputEnvelope
    connect?: Enumerable<remindersWhereUniqueInput>
  }

  export type notesUncheckedCreateNestedManyWithoutDevicesInput = {
    create?: XOR<Enumerable<notesCreateWithoutDevicesInput>, Enumerable<notesUncheckedCreateWithoutDevicesInput>>
    connectOrCreate?: Enumerable<notesCreateOrConnectWithoutDevicesInput>
    createMany?: notesCreateManyDevicesInputEnvelope
    connect?: Enumerable<notesWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type imagesUpdateManyWithoutDevicesNestedInput = {
    create?: XOR<Enumerable<imagesCreateWithoutDevicesInput>, Enumerable<imagesUncheckedCreateWithoutDevicesInput>>
    connectOrCreate?: Enumerable<imagesCreateOrConnectWithoutDevicesInput>
    upsert?: Enumerable<imagesUpsertWithWhereUniqueWithoutDevicesInput>
    createMany?: imagesCreateManyDevicesInputEnvelope
    set?: Enumerable<imagesWhereUniqueInput>
    disconnect?: Enumerable<imagesWhereUniqueInput>
    delete?: Enumerable<imagesWhereUniqueInput>
    connect?: Enumerable<imagesWhereUniqueInput>
    update?: Enumerable<imagesUpdateWithWhereUniqueWithoutDevicesInput>
    updateMany?: Enumerable<imagesUpdateManyWithWhereWithoutDevicesInput>
    deleteMany?: Enumerable<imagesScalarWhereInput>
  }

  export type remindersUpdateManyWithoutDevicesNestedInput = {
    create?: XOR<Enumerable<remindersCreateWithoutDevicesInput>, Enumerable<remindersUncheckedCreateWithoutDevicesInput>>
    connectOrCreate?: Enumerable<remindersCreateOrConnectWithoutDevicesInput>
    upsert?: Enumerable<remindersUpsertWithWhereUniqueWithoutDevicesInput>
    createMany?: remindersCreateManyDevicesInputEnvelope
    set?: Enumerable<remindersWhereUniqueInput>
    disconnect?: Enumerable<remindersWhereUniqueInput>
    delete?: Enumerable<remindersWhereUniqueInput>
    connect?: Enumerable<remindersWhereUniqueInput>
    update?: Enumerable<remindersUpdateWithWhereUniqueWithoutDevicesInput>
    updateMany?: Enumerable<remindersUpdateManyWithWhereWithoutDevicesInput>
    deleteMany?: Enumerable<remindersScalarWhereInput>
  }

  export type notesUpdateManyWithoutDevicesNestedInput = {
    create?: XOR<Enumerable<notesCreateWithoutDevicesInput>, Enumerable<notesUncheckedCreateWithoutDevicesInput>>
    connectOrCreate?: Enumerable<notesCreateOrConnectWithoutDevicesInput>
    upsert?: Enumerable<notesUpsertWithWhereUniqueWithoutDevicesInput>
    createMany?: notesCreateManyDevicesInputEnvelope
    set?: Enumerable<notesWhereUniqueInput>
    disconnect?: Enumerable<notesWhereUniqueInput>
    delete?: Enumerable<notesWhereUniqueInput>
    connect?: Enumerable<notesWhereUniqueInput>
    update?: Enumerable<notesUpdateWithWhereUniqueWithoutDevicesInput>
    updateMany?: Enumerable<notesUpdateManyWithWhereWithoutDevicesInput>
    deleteMany?: Enumerable<notesScalarWhereInput>
  }

  export type imagesUncheckedUpdateManyWithoutDevicesNestedInput = {
    create?: XOR<Enumerable<imagesCreateWithoutDevicesInput>, Enumerable<imagesUncheckedCreateWithoutDevicesInput>>
    connectOrCreate?: Enumerable<imagesCreateOrConnectWithoutDevicesInput>
    upsert?: Enumerable<imagesUpsertWithWhereUniqueWithoutDevicesInput>
    createMany?: imagesCreateManyDevicesInputEnvelope
    set?: Enumerable<imagesWhereUniqueInput>
    disconnect?: Enumerable<imagesWhereUniqueInput>
    delete?: Enumerable<imagesWhereUniqueInput>
    connect?: Enumerable<imagesWhereUniqueInput>
    update?: Enumerable<imagesUpdateWithWhereUniqueWithoutDevicesInput>
    updateMany?: Enumerable<imagesUpdateManyWithWhereWithoutDevicesInput>
    deleteMany?: Enumerable<imagesScalarWhereInput>
  }

  export type remindersUncheckedUpdateManyWithoutDevicesNestedInput = {
    create?: XOR<Enumerable<remindersCreateWithoutDevicesInput>, Enumerable<remindersUncheckedCreateWithoutDevicesInput>>
    connectOrCreate?: Enumerable<remindersCreateOrConnectWithoutDevicesInput>
    upsert?: Enumerable<remindersUpsertWithWhereUniqueWithoutDevicesInput>
    createMany?: remindersCreateManyDevicesInputEnvelope
    set?: Enumerable<remindersWhereUniqueInput>
    disconnect?: Enumerable<remindersWhereUniqueInput>
    delete?: Enumerable<remindersWhereUniqueInput>
    connect?: Enumerable<remindersWhereUniqueInput>
    update?: Enumerable<remindersUpdateWithWhereUniqueWithoutDevicesInput>
    updateMany?: Enumerable<remindersUpdateManyWithWhereWithoutDevicesInput>
    deleteMany?: Enumerable<remindersScalarWhereInput>
  }

  export type notesUncheckedUpdateManyWithoutDevicesNestedInput = {
    create?: XOR<Enumerable<notesCreateWithoutDevicesInput>, Enumerable<notesUncheckedCreateWithoutDevicesInput>>
    connectOrCreate?: Enumerable<notesCreateOrConnectWithoutDevicesInput>
    upsert?: Enumerable<notesUpsertWithWhereUniqueWithoutDevicesInput>
    createMany?: notesCreateManyDevicesInputEnvelope
    set?: Enumerable<notesWhereUniqueInput>
    disconnect?: Enumerable<notesWhereUniqueInput>
    delete?: Enumerable<notesWhereUniqueInput>
    connect?: Enumerable<notesWhereUniqueInput>
    update?: Enumerable<notesUpdateWithWhereUniqueWithoutDevicesInput>
    updateMany?: Enumerable<notesUpdateManyWithWhereWithoutDevicesInput>
    deleteMany?: Enumerable<notesScalarWhereInput>
  }

  export type devicesCreateNestedOneWithoutImagesInput = {
    create?: XOR<devicesCreateWithoutImagesInput, devicesUncheckedCreateWithoutImagesInput>
    connectOrCreate?: devicesCreateOrConnectWithoutImagesInput
    connect?: devicesWhereUniqueInput
  }

  export type devicesUpdateOneWithoutImagesNestedInput = {
    create?: XOR<devicesCreateWithoutImagesInput, devicesUncheckedCreateWithoutImagesInput>
    connectOrCreate?: devicesCreateOrConnectWithoutImagesInput
    upsert?: devicesUpsertWithoutImagesInput
    disconnect?: boolean
    delete?: boolean
    connect?: devicesWhereUniqueInput
    update?: XOR<devicesUpdateWithoutImagesInput, devicesUncheckedUpdateWithoutImagesInput>
  }

  export type devicesCreateNestedOneWithoutNotesInput = {
    create?: XOR<devicesCreateWithoutNotesInput, devicesUncheckedCreateWithoutNotesInput>
    connectOrCreate?: devicesCreateOrConnectWithoutNotesInput
    connect?: devicesWhereUniqueInput
  }

  export type devicesUpdateOneWithoutNotesNestedInput = {
    create?: XOR<devicesCreateWithoutNotesInput, devicesUncheckedCreateWithoutNotesInput>
    connectOrCreate?: devicesCreateOrConnectWithoutNotesInput
    upsert?: devicesUpsertWithoutNotesInput
    disconnect?: boolean
    delete?: boolean
    connect?: devicesWhereUniqueInput
    update?: XOR<devicesUpdateWithoutNotesInput, devicesUncheckedUpdateWithoutNotesInput>
  }

  export type devicesCreateNestedOneWithoutRemindersInput = {
    create?: XOR<devicesCreateWithoutRemindersInput, devicesUncheckedCreateWithoutRemindersInput>
    connectOrCreate?: devicesCreateOrConnectWithoutRemindersInput
    connect?: devicesWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type devicesUpdateOneWithoutRemindersNestedInput = {
    create?: XOR<devicesCreateWithoutRemindersInput, devicesUncheckedCreateWithoutRemindersInput>
    connectOrCreate?: devicesCreateOrConnectWithoutRemindersInput
    upsert?: devicesUpsertWithoutRemindersInput
    disconnect?: boolean
    delete?: boolean
    connect?: devicesWhereUniqueInput
    update?: XOR<devicesUpdateWithoutRemindersInput, devicesUncheckedUpdateWithoutRemindersInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type imagesCreateWithoutDevicesInput = {
    id?: string
    imageURL: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type imagesUncheckedCreateWithoutDevicesInput = {
    id?: string
    imageURL: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type imagesCreateOrConnectWithoutDevicesInput = {
    where: imagesWhereUniqueInput
    create: XOR<imagesCreateWithoutDevicesInput, imagesUncheckedCreateWithoutDevicesInput>
  }

  export type imagesCreateManyDevicesInputEnvelope = {
    data: Enumerable<imagesCreateManyDevicesInput>
    skipDuplicates?: boolean
  }

  export type remindersCreateWithoutDevicesInput = {
    id?: string
    time: string
    message?: string | null
    isComing: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type remindersUncheckedCreateWithoutDevicesInput = {
    id?: string
    time: string
    message?: string | null
    isComing: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type remindersCreateOrConnectWithoutDevicesInput = {
    where: remindersWhereUniqueInput
    create: XOR<remindersCreateWithoutDevicesInput, remindersUncheckedCreateWithoutDevicesInput>
  }

  export type remindersCreateManyDevicesInputEnvelope = {
    data: Enumerable<remindersCreateManyDevicesInput>
    skipDuplicates?: boolean
  }

  export type notesCreateWithoutDevicesInput = {
    id?: string
    title?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type notesUncheckedCreateWithoutDevicesInput = {
    id?: string
    title?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type notesCreateOrConnectWithoutDevicesInput = {
    where: notesWhereUniqueInput
    create: XOR<notesCreateWithoutDevicesInput, notesUncheckedCreateWithoutDevicesInput>
  }

  export type notesCreateManyDevicesInputEnvelope = {
    data: Enumerable<notesCreateManyDevicesInput>
    skipDuplicates?: boolean
  }

  export type imagesUpsertWithWhereUniqueWithoutDevicesInput = {
    where: imagesWhereUniqueInput
    update: XOR<imagesUpdateWithoutDevicesInput, imagesUncheckedUpdateWithoutDevicesInput>
    create: XOR<imagesCreateWithoutDevicesInput, imagesUncheckedCreateWithoutDevicesInput>
  }

  export type imagesUpdateWithWhereUniqueWithoutDevicesInput = {
    where: imagesWhereUniqueInput
    data: XOR<imagesUpdateWithoutDevicesInput, imagesUncheckedUpdateWithoutDevicesInput>
  }

  export type imagesUpdateManyWithWhereWithoutDevicesInput = {
    where: imagesScalarWhereInput
    data: XOR<imagesUpdateManyMutationInput, imagesUncheckedUpdateManyWithoutImagesInput>
  }

  export type imagesScalarWhereInput = {
    AND?: Enumerable<imagesScalarWhereInput>
    OR?: Enumerable<imagesScalarWhereInput>
    NOT?: Enumerable<imagesScalarWhereInput>
    id?: StringFilter | string
    deviceId?: StringNullableFilter | string | null
    imageURL?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type remindersUpsertWithWhereUniqueWithoutDevicesInput = {
    where: remindersWhereUniqueInput
    update: XOR<remindersUpdateWithoutDevicesInput, remindersUncheckedUpdateWithoutDevicesInput>
    create: XOR<remindersCreateWithoutDevicesInput, remindersUncheckedCreateWithoutDevicesInput>
  }

  export type remindersUpdateWithWhereUniqueWithoutDevicesInput = {
    where: remindersWhereUniqueInput
    data: XOR<remindersUpdateWithoutDevicesInput, remindersUncheckedUpdateWithoutDevicesInput>
  }

  export type remindersUpdateManyWithWhereWithoutDevicesInput = {
    where: remindersScalarWhereInput
    data: XOR<remindersUpdateManyMutationInput, remindersUncheckedUpdateManyWithoutRemindersInput>
  }

  export type remindersScalarWhereInput = {
    AND?: Enumerable<remindersScalarWhereInput>
    OR?: Enumerable<remindersScalarWhereInput>
    NOT?: Enumerable<remindersScalarWhereInput>
    id?: StringFilter | string
    time?: StringFilter | string
    message?: StringNullableFilter | string | null
    isComing?: BoolFilter | boolean
    deviceId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type notesUpsertWithWhereUniqueWithoutDevicesInput = {
    where: notesWhereUniqueInput
    update: XOR<notesUpdateWithoutDevicesInput, notesUncheckedUpdateWithoutDevicesInput>
    create: XOR<notesCreateWithoutDevicesInput, notesUncheckedCreateWithoutDevicesInput>
  }

  export type notesUpdateWithWhereUniqueWithoutDevicesInput = {
    where: notesWhereUniqueInput
    data: XOR<notesUpdateWithoutDevicesInput, notesUncheckedUpdateWithoutDevicesInput>
  }

  export type notesUpdateManyWithWhereWithoutDevicesInput = {
    where: notesScalarWhereInput
    data: XOR<notesUpdateManyMutationInput, notesUncheckedUpdateManyWithoutNotesInput>
  }

  export type notesScalarWhereInput = {
    AND?: Enumerable<notesScalarWhereInput>
    OR?: Enumerable<notesScalarWhereInput>
    NOT?: Enumerable<notesScalarWhereInput>
    id?: StringFilter | string
    title?: StringNullableFilter | string | null
    content?: StringFilter | string
    deviceId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type devicesCreateWithoutImagesInput = {
    id?: string
    anlagenID?: string | null
    seriennr?: string | null
    gehortzu?: string | null
    anlagenbez?: string | null
    typModell?: string | null
    hersteller?: string | null
    lieferant?: string | null
    servicestelle?: string | null
    abteilung?: string | null
    kostenstelle?: string | null
    SLA?: string | null
    preisProSLA?: string | null
    status?: string | null
    raumbezMT?: string | null
    contact?: string | null
    date?: string | null
    email?: string | null
    telephone?: string | null
    companyName?: string | null
    isRequested?: boolean | null
    isDone?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reminders?: remindersCreateNestedManyWithoutDevicesInput
    notes?: notesCreateNestedManyWithoutDevicesInput
  }

  export type devicesUncheckedCreateWithoutImagesInput = {
    id?: string
    anlagenID?: string | null
    seriennr?: string | null
    gehortzu?: string | null
    anlagenbez?: string | null
    typModell?: string | null
    hersteller?: string | null
    lieferant?: string | null
    servicestelle?: string | null
    abteilung?: string | null
    kostenstelle?: string | null
    SLA?: string | null
    preisProSLA?: string | null
    status?: string | null
    raumbezMT?: string | null
    contact?: string | null
    date?: string | null
    email?: string | null
    telephone?: string | null
    companyName?: string | null
    isRequested?: boolean | null
    isDone?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reminders?: remindersUncheckedCreateNestedManyWithoutDevicesInput
    notes?: notesUncheckedCreateNestedManyWithoutDevicesInput
  }

  export type devicesCreateOrConnectWithoutImagesInput = {
    where: devicesWhereUniqueInput
    create: XOR<devicesCreateWithoutImagesInput, devicesUncheckedCreateWithoutImagesInput>
  }

  export type devicesUpsertWithoutImagesInput = {
    update: XOR<devicesUpdateWithoutImagesInput, devicesUncheckedUpdateWithoutImagesInput>
    create: XOR<devicesCreateWithoutImagesInput, devicesUncheckedCreateWithoutImagesInput>
  }

  export type devicesUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    anlagenID?: NullableStringFieldUpdateOperationsInput | string | null
    seriennr?: NullableStringFieldUpdateOperationsInput | string | null
    gehortzu?: NullableStringFieldUpdateOperationsInput | string | null
    anlagenbez?: NullableStringFieldUpdateOperationsInput | string | null
    typModell?: NullableStringFieldUpdateOperationsInput | string | null
    hersteller?: NullableStringFieldUpdateOperationsInput | string | null
    lieferant?: NullableStringFieldUpdateOperationsInput | string | null
    servicestelle?: NullableStringFieldUpdateOperationsInput | string | null
    abteilung?: NullableStringFieldUpdateOperationsInput | string | null
    kostenstelle?: NullableStringFieldUpdateOperationsInput | string | null
    SLA?: NullableStringFieldUpdateOperationsInput | string | null
    preisProSLA?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    raumbezMT?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    isRequested?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reminders?: remindersUpdateManyWithoutDevicesNestedInput
    notes?: notesUpdateManyWithoutDevicesNestedInput
  }

  export type devicesUncheckedUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    anlagenID?: NullableStringFieldUpdateOperationsInput | string | null
    seriennr?: NullableStringFieldUpdateOperationsInput | string | null
    gehortzu?: NullableStringFieldUpdateOperationsInput | string | null
    anlagenbez?: NullableStringFieldUpdateOperationsInput | string | null
    typModell?: NullableStringFieldUpdateOperationsInput | string | null
    hersteller?: NullableStringFieldUpdateOperationsInput | string | null
    lieferant?: NullableStringFieldUpdateOperationsInput | string | null
    servicestelle?: NullableStringFieldUpdateOperationsInput | string | null
    abteilung?: NullableStringFieldUpdateOperationsInput | string | null
    kostenstelle?: NullableStringFieldUpdateOperationsInput | string | null
    SLA?: NullableStringFieldUpdateOperationsInput | string | null
    preisProSLA?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    raumbezMT?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    isRequested?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reminders?: remindersUncheckedUpdateManyWithoutDevicesNestedInput
    notes?: notesUncheckedUpdateManyWithoutDevicesNestedInput
  }

  export type devicesCreateWithoutNotesInput = {
    id?: string
    anlagenID?: string | null
    seriennr?: string | null
    gehortzu?: string | null
    anlagenbez?: string | null
    typModell?: string | null
    hersteller?: string | null
    lieferant?: string | null
    servicestelle?: string | null
    abteilung?: string | null
    kostenstelle?: string | null
    SLA?: string | null
    preisProSLA?: string | null
    status?: string | null
    raumbezMT?: string | null
    contact?: string | null
    date?: string | null
    email?: string | null
    telephone?: string | null
    companyName?: string | null
    isRequested?: boolean | null
    isDone?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: imagesCreateNestedManyWithoutDevicesInput
    reminders?: remindersCreateNestedManyWithoutDevicesInput
  }

  export type devicesUncheckedCreateWithoutNotesInput = {
    id?: string
    anlagenID?: string | null
    seriennr?: string | null
    gehortzu?: string | null
    anlagenbez?: string | null
    typModell?: string | null
    hersteller?: string | null
    lieferant?: string | null
    servicestelle?: string | null
    abteilung?: string | null
    kostenstelle?: string | null
    SLA?: string | null
    preisProSLA?: string | null
    status?: string | null
    raumbezMT?: string | null
    contact?: string | null
    date?: string | null
    email?: string | null
    telephone?: string | null
    companyName?: string | null
    isRequested?: boolean | null
    isDone?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: imagesUncheckedCreateNestedManyWithoutDevicesInput
    reminders?: remindersUncheckedCreateNestedManyWithoutDevicesInput
  }

  export type devicesCreateOrConnectWithoutNotesInput = {
    where: devicesWhereUniqueInput
    create: XOR<devicesCreateWithoutNotesInput, devicesUncheckedCreateWithoutNotesInput>
  }

  export type devicesUpsertWithoutNotesInput = {
    update: XOR<devicesUpdateWithoutNotesInput, devicesUncheckedUpdateWithoutNotesInput>
    create: XOR<devicesCreateWithoutNotesInput, devicesUncheckedCreateWithoutNotesInput>
  }

  export type devicesUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    anlagenID?: NullableStringFieldUpdateOperationsInput | string | null
    seriennr?: NullableStringFieldUpdateOperationsInput | string | null
    gehortzu?: NullableStringFieldUpdateOperationsInput | string | null
    anlagenbez?: NullableStringFieldUpdateOperationsInput | string | null
    typModell?: NullableStringFieldUpdateOperationsInput | string | null
    hersteller?: NullableStringFieldUpdateOperationsInput | string | null
    lieferant?: NullableStringFieldUpdateOperationsInput | string | null
    servicestelle?: NullableStringFieldUpdateOperationsInput | string | null
    abteilung?: NullableStringFieldUpdateOperationsInput | string | null
    kostenstelle?: NullableStringFieldUpdateOperationsInput | string | null
    SLA?: NullableStringFieldUpdateOperationsInput | string | null
    preisProSLA?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    raumbezMT?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    isRequested?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: imagesUpdateManyWithoutDevicesNestedInput
    reminders?: remindersUpdateManyWithoutDevicesNestedInput
  }

  export type devicesUncheckedUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    anlagenID?: NullableStringFieldUpdateOperationsInput | string | null
    seriennr?: NullableStringFieldUpdateOperationsInput | string | null
    gehortzu?: NullableStringFieldUpdateOperationsInput | string | null
    anlagenbez?: NullableStringFieldUpdateOperationsInput | string | null
    typModell?: NullableStringFieldUpdateOperationsInput | string | null
    hersteller?: NullableStringFieldUpdateOperationsInput | string | null
    lieferant?: NullableStringFieldUpdateOperationsInput | string | null
    servicestelle?: NullableStringFieldUpdateOperationsInput | string | null
    abteilung?: NullableStringFieldUpdateOperationsInput | string | null
    kostenstelle?: NullableStringFieldUpdateOperationsInput | string | null
    SLA?: NullableStringFieldUpdateOperationsInput | string | null
    preisProSLA?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    raumbezMT?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    isRequested?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: imagesUncheckedUpdateManyWithoutDevicesNestedInput
    reminders?: remindersUncheckedUpdateManyWithoutDevicesNestedInput
  }

  export type devicesCreateWithoutRemindersInput = {
    id?: string
    anlagenID?: string | null
    seriennr?: string | null
    gehortzu?: string | null
    anlagenbez?: string | null
    typModell?: string | null
    hersteller?: string | null
    lieferant?: string | null
    servicestelle?: string | null
    abteilung?: string | null
    kostenstelle?: string | null
    SLA?: string | null
    preisProSLA?: string | null
    status?: string | null
    raumbezMT?: string | null
    contact?: string | null
    date?: string | null
    email?: string | null
    telephone?: string | null
    companyName?: string | null
    isRequested?: boolean | null
    isDone?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: imagesCreateNestedManyWithoutDevicesInput
    notes?: notesCreateNestedManyWithoutDevicesInput
  }

  export type devicesUncheckedCreateWithoutRemindersInput = {
    id?: string
    anlagenID?: string | null
    seriennr?: string | null
    gehortzu?: string | null
    anlagenbez?: string | null
    typModell?: string | null
    hersteller?: string | null
    lieferant?: string | null
    servicestelle?: string | null
    abteilung?: string | null
    kostenstelle?: string | null
    SLA?: string | null
    preisProSLA?: string | null
    status?: string | null
    raumbezMT?: string | null
    contact?: string | null
    date?: string | null
    email?: string | null
    telephone?: string | null
    companyName?: string | null
    isRequested?: boolean | null
    isDone?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: imagesUncheckedCreateNestedManyWithoutDevicesInput
    notes?: notesUncheckedCreateNestedManyWithoutDevicesInput
  }

  export type devicesCreateOrConnectWithoutRemindersInput = {
    where: devicesWhereUniqueInput
    create: XOR<devicesCreateWithoutRemindersInput, devicesUncheckedCreateWithoutRemindersInput>
  }

  export type devicesUpsertWithoutRemindersInput = {
    update: XOR<devicesUpdateWithoutRemindersInput, devicesUncheckedUpdateWithoutRemindersInput>
    create: XOR<devicesCreateWithoutRemindersInput, devicesUncheckedCreateWithoutRemindersInput>
  }

  export type devicesUpdateWithoutRemindersInput = {
    id?: StringFieldUpdateOperationsInput | string
    anlagenID?: NullableStringFieldUpdateOperationsInput | string | null
    seriennr?: NullableStringFieldUpdateOperationsInput | string | null
    gehortzu?: NullableStringFieldUpdateOperationsInput | string | null
    anlagenbez?: NullableStringFieldUpdateOperationsInput | string | null
    typModell?: NullableStringFieldUpdateOperationsInput | string | null
    hersteller?: NullableStringFieldUpdateOperationsInput | string | null
    lieferant?: NullableStringFieldUpdateOperationsInput | string | null
    servicestelle?: NullableStringFieldUpdateOperationsInput | string | null
    abteilung?: NullableStringFieldUpdateOperationsInput | string | null
    kostenstelle?: NullableStringFieldUpdateOperationsInput | string | null
    SLA?: NullableStringFieldUpdateOperationsInput | string | null
    preisProSLA?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    raumbezMT?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    isRequested?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: imagesUpdateManyWithoutDevicesNestedInput
    notes?: notesUpdateManyWithoutDevicesNestedInput
  }

  export type devicesUncheckedUpdateWithoutRemindersInput = {
    id?: StringFieldUpdateOperationsInput | string
    anlagenID?: NullableStringFieldUpdateOperationsInput | string | null
    seriennr?: NullableStringFieldUpdateOperationsInput | string | null
    gehortzu?: NullableStringFieldUpdateOperationsInput | string | null
    anlagenbez?: NullableStringFieldUpdateOperationsInput | string | null
    typModell?: NullableStringFieldUpdateOperationsInput | string | null
    hersteller?: NullableStringFieldUpdateOperationsInput | string | null
    lieferant?: NullableStringFieldUpdateOperationsInput | string | null
    servicestelle?: NullableStringFieldUpdateOperationsInput | string | null
    abteilung?: NullableStringFieldUpdateOperationsInput | string | null
    kostenstelle?: NullableStringFieldUpdateOperationsInput | string | null
    SLA?: NullableStringFieldUpdateOperationsInput | string | null
    preisProSLA?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    raumbezMT?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    isRequested?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: imagesUncheckedUpdateManyWithoutDevicesNestedInput
    notes?: notesUncheckedUpdateManyWithoutDevicesNestedInput
  }

  export type imagesCreateManyDevicesInput = {
    id?: string
    imageURL: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type remindersCreateManyDevicesInput = {
    id?: string
    time: string
    message?: string | null
    isComing: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type notesCreateManyDevicesInput = {
    id?: string
    title?: string | null
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type imagesUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageURL?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type imagesUncheckedUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageURL?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type imagesUncheckedUpdateManyWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageURL?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type remindersUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    isComing?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type remindersUncheckedUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    isComing?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type remindersUncheckedUpdateManyWithoutRemindersInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    isComing?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type notesUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type notesUncheckedUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type notesUncheckedUpdateManyWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}